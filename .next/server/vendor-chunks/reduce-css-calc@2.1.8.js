/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/reduce-css-calc@2.1.8";
exports.ids = ["vendor-chunks/reduce-css-calc@2.1.8"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/reduce-css-calc@2.1.8/node_modules/reduce-css-calc/dist/index.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/reduce-css-calc@2.1.8/node_modules/reduce-css-calc/dist/index.js ***!
  \*********************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar _postcssValueParser = __webpack_require__(/*! postcss-value-parser */ \"(ssr)/./node_modules/.pnpm/postcss-value-parser@3.3.1/node_modules/postcss-value-parser/lib/index.js\");\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\nvar _parser = __webpack_require__(/*! ./parser */ \"(ssr)/./node_modules/.pnpm/reduce-css-calc@2.1.8/node_modules/reduce-css-calc/dist/parser.js\");\nvar _reducer = __webpack_require__(/*! ./lib/reducer */ \"(ssr)/./node_modules/.pnpm/reduce-css-calc@2.1.8/node_modules/reduce-css-calc/dist/lib/reducer.js\");\nvar _reducer2 = _interopRequireDefault(_reducer);\nvar _stringifier = __webpack_require__(/*! ./lib/stringifier */ \"(ssr)/./node_modules/.pnpm/reduce-css-calc@2.1.8/node_modules/reduce-css-calc/dist/lib/stringifier.js\");\nvar _stringifier2 = _interopRequireDefault(_stringifier);\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n// eslint-disable-line\nvar MATCH_CALC = /((?:\\-[a-z]+\\-)?calc)/;\nexports[\"default\"] = function(value) {\n    var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n    return (0, _postcssValueParser2.default)(value).walk(function(node) {\n        // skip anything which isn't a calc() function\n        if (node.type !== \"function\" || !MATCH_CALC.test(node.value)) return;\n        // stringify calc expression and produce an AST\n        var contents = _postcssValueParser2.default.stringify(node.nodes);\n        // skip constant() and env()\n        if (contents.indexOf(\"constant\") >= 0 || contents.indexOf(\"env\") >= 0) return;\n        var ast = _parser.parser.parse(contents);\n        // reduce AST to its simplest form, that is, either to a single value\n        // or a simplified calc expression\n        var reducedAst = (0, _reducer2.default)(ast, precision);\n        // stringify AST and write it back\n        node.type = \"word\";\n        node.value = (0, _stringifier2.default)(node.value, reducedAst, precision);\n    }, true).toString();\n};\nmodule.exports = exports[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcmVkdWNlLWNzcy1jYWxjQDIuMS44L25vZGVfbW9kdWxlcy9yZWR1Y2UtY3NzLWNhbGMvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFFRixJQUFJQyxzQkFBc0JDLG1CQUFPQSxDQUFDO0FBRWxDLElBQUlDLHVCQUF1QkMsdUJBQXVCSDtBQUVsRCxJQUFJSSxVQUFVSCxtQkFBT0EsQ0FBQztBQUV0QixJQUFJSSxXQUFXSixtQkFBT0EsQ0FBQztBQUV2QixJQUFJSyxZQUFZSCx1QkFBdUJFO0FBRXZDLElBQUlFLGVBQWVOLG1CQUFPQSxDQUFDO0FBRTNCLElBQUlPLGdCQUFnQkwsdUJBQXVCSTtBQUUzQyxTQUFTSix1QkFBdUJNLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRUUsU0FBU0Y7SUFBSTtBQUFHO0FBRTlGLHNCQUFzQjtBQUN0QixJQUFJRyxhQUFhO0FBRWpCZCxrQkFBZSxHQUFHLFNBQVVDLEtBQUs7SUFDL0IsSUFBSWMsWUFBWUMsVUFBVUMsTUFBTSxHQUFHLEtBQUtELFNBQVMsQ0FBQyxFQUFFLEtBQUtFLFlBQVlGLFNBQVMsQ0FBQyxFQUFFLEdBQUc7SUFFcEYsT0FBTyxDQUFDLEdBQUdaLHFCQUFxQlMsT0FBTyxFQUFFWixPQUFPa0IsSUFBSSxDQUFDLFNBQVVDLElBQUk7UUFDakUsOENBQThDO1FBQzlDLElBQUlBLEtBQUtDLElBQUksS0FBSyxjQUFjLENBQUNQLFdBQVdRLElBQUksQ0FBQ0YsS0FBS25CLEtBQUssR0FBRztRQUU5RCwrQ0FBK0M7UUFDL0MsSUFBSXNCLFdBQVduQixxQkFBcUJTLE9BQU8sQ0FBQ1csU0FBUyxDQUFDSixLQUFLSyxLQUFLO1FBRWhFLDRCQUE0QjtRQUM1QixJQUFJRixTQUFTRyxPQUFPLENBQUMsZUFBZSxLQUFLSCxTQUFTRyxPQUFPLENBQUMsVUFBVSxHQUFHO1FBRXZFLElBQUlDLE1BQU1yQixRQUFRc0IsTUFBTSxDQUFDQyxLQUFLLENBQUNOO1FBRS9CLHFFQUFxRTtRQUNyRSxrQ0FBa0M7UUFDbEMsSUFBSU8sYUFBYSxDQUFDLEdBQUd0QixVQUFVSyxPQUFPLEVBQUVjLEtBQUtaO1FBRTdDLGtDQUFrQztRQUNsQ0ssS0FBS0MsSUFBSSxHQUFHO1FBQ1pELEtBQUtuQixLQUFLLEdBQUcsQ0FBQyxHQUFHUyxjQUFjRyxPQUFPLEVBQUVPLEtBQUtuQixLQUFLLEVBQUU2QixZQUFZZjtJQUNsRSxHQUFHLE1BQU1nQixRQUFRO0FBQ25CO0FBRUFDLE9BQU9oQyxPQUFPLEdBQUdBLE9BQU8sQ0FBQyxVQUFVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RyYXRmb3JkX2FpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZHVjZS1jc3MtY2FsY0AyLjEuOC9ub2RlX21vZHVsZXMvcmVkdWNlLWNzcy1jYWxjL2Rpc3QvaW5kZXguanM/YTgwZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcG9zdGNzc1ZhbHVlUGFyc2VyID0gcmVxdWlyZSgncG9zdGNzcy12YWx1ZS1wYXJzZXInKTtcblxudmFyIF9wb3N0Y3NzVmFsdWVQYXJzZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zdGNzc1ZhbHVlUGFyc2VyKTtcblxudmFyIF9wYXJzZXIgPSByZXF1aXJlKCcuL3BhcnNlcicpO1xuXG52YXIgX3JlZHVjZXIgPSByZXF1aXJlKCcuL2xpYi9yZWR1Y2VyJyk7XG5cbnZhciBfcmVkdWNlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWR1Y2VyKTtcblxudmFyIF9zdHJpbmdpZmllciA9IHJlcXVpcmUoJy4vbGliL3N0cmluZ2lmaWVyJyk7XG5cbnZhciBfc3RyaW5naWZpZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RyaW5naWZpZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1saW5lXG52YXIgTUFUQ0hfQ0FMQyA9IC8oKD86XFwtW2Etel0rXFwtKT9jYWxjKS87XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJlY2lzaW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiA1O1xuXG4gIHJldHVybiAoMCwgX3Bvc3Rjc3NWYWx1ZVBhcnNlcjIuZGVmYXVsdCkodmFsdWUpLndhbGsoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAvLyBza2lwIGFueXRoaW5nIHdoaWNoIGlzbid0IGEgY2FsYygpIGZ1bmN0aW9uXG4gICAgaWYgKG5vZGUudHlwZSAhPT0gJ2Z1bmN0aW9uJyB8fCAhTUFUQ0hfQ0FMQy50ZXN0KG5vZGUudmFsdWUpKSByZXR1cm47XG5cbiAgICAvLyBzdHJpbmdpZnkgY2FsYyBleHByZXNzaW9uIGFuZCBwcm9kdWNlIGFuIEFTVFxuICAgIHZhciBjb250ZW50cyA9IF9wb3N0Y3NzVmFsdWVQYXJzZXIyLmRlZmF1bHQuc3RyaW5naWZ5KG5vZGUubm9kZXMpO1xuXG4gICAgLy8gc2tpcCBjb25zdGFudCgpIGFuZCBlbnYoKVxuICAgIGlmIChjb250ZW50cy5pbmRleE9mKCdjb25zdGFudCcpID49IDAgfHwgY29udGVudHMuaW5kZXhPZignZW52JykgPj0gMCkgcmV0dXJuO1xuXG4gICAgdmFyIGFzdCA9IF9wYXJzZXIucGFyc2VyLnBhcnNlKGNvbnRlbnRzKTtcblxuICAgIC8vIHJlZHVjZSBBU1QgdG8gaXRzIHNpbXBsZXN0IGZvcm0sIHRoYXQgaXMsIGVpdGhlciB0byBhIHNpbmdsZSB2YWx1ZVxuICAgIC8vIG9yIGEgc2ltcGxpZmllZCBjYWxjIGV4cHJlc3Npb25cbiAgICB2YXIgcmVkdWNlZEFzdCA9ICgwLCBfcmVkdWNlcjIuZGVmYXVsdCkoYXN0LCBwcmVjaXNpb24pO1xuXG4gICAgLy8gc3RyaW5naWZ5IEFTVCBhbmQgd3JpdGUgaXQgYmFja1xuICAgIG5vZGUudHlwZSA9ICd3b3JkJztcbiAgICBub2RlLnZhbHVlID0gKDAsIF9zdHJpbmdpZmllcjIuZGVmYXVsdCkobm9kZS52YWx1ZSwgcmVkdWNlZEFzdCwgcHJlY2lzaW9uKTtcbiAgfSwgdHJ1ZSkudG9TdHJpbmcoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9wb3N0Y3NzVmFsdWVQYXJzZXIiLCJyZXF1aXJlIiwiX3Bvc3Rjc3NWYWx1ZVBhcnNlcjIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3BhcnNlciIsIl9yZWR1Y2VyIiwiX3JlZHVjZXIyIiwiX3N0cmluZ2lmaWVyIiwiX3N0cmluZ2lmaWVyMiIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiTUFUQ0hfQ0FMQyIsInByZWNpc2lvbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIndhbGsiLCJub2RlIiwidHlwZSIsInRlc3QiLCJjb250ZW50cyIsInN0cmluZ2lmeSIsIm5vZGVzIiwiaW5kZXhPZiIsImFzdCIsInBhcnNlciIsInBhcnNlIiwicmVkdWNlZEFzdCIsInRvU3RyaW5nIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/reduce-css-calc@2.1.8/node_modules/reduce-css-calc/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/reduce-css-calc@2.1.8/node_modules/reduce-css-calc/dist/lib/convert.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/reduce-css-calc@2.1.8/node_modules/reduce-css-calc/dist/lib/convert.js ***!
  \***************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar _cssUnitConverter = __webpack_require__(/*! css-unit-converter */ \"(ssr)/./node_modules/.pnpm/css-unit-converter@1.1.2/node_modules/css-unit-converter/index.js\");\nvar _cssUnitConverter2 = _interopRequireDefault(_cssUnitConverter);\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction convertNodes(left, right, precision) {\n    switch(left.type){\n        case \"LengthValue\":\n        case \"AngleValue\":\n        case \"TimeValue\":\n        case \"FrequencyValue\":\n        case \"ResolutionValue\":\n            return convertAbsoluteLength(left, right, precision);\n        default:\n            return {\n                left: left,\n                right: right\n            };\n    }\n}\nfunction convertAbsoluteLength(left, right, precision) {\n    if (right.type === left.type) {\n        right = {\n            type: left.type,\n            value: (0, _cssUnitConverter2.default)(right.value, right.unit, left.unit, precision),\n            unit: left.unit\n        };\n    }\n    return {\n        left: left,\n        right: right\n    };\n}\nexports[\"default\"] = convertNodes;\nmodule.exports = exports[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcmVkdWNlLWNzcy1jYWxjQDIuMS44L25vZGVfbW9kdWxlcy9yZWR1Y2UtY3NzLWNhbGMvZGlzdC9saWIvY29udmVydC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFFRixJQUFJQyxvQkFBb0JDLG1CQUFPQSxDQUFDO0FBRWhDLElBQUlDLHFCQUFxQkMsdUJBQXVCSDtBQUVoRCxTQUFTRyx1QkFBdUJDLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRUUsU0FBU0Y7SUFBSTtBQUFHO0FBRTlGLFNBQVNHLGFBQWFDLElBQUksRUFBRUMsS0FBSyxFQUFFQyxTQUFTO0lBQzFDLE9BQVFGLEtBQUtHLElBQUk7UUFDZixLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztZQUNILE9BQU9DLHNCQUFzQkosTUFBTUMsT0FBT0M7UUFDNUM7WUFDRSxPQUFPO2dCQUFFRixNQUFNQTtnQkFBTUMsT0FBT0E7WUFBTTtJQUN0QztBQUNGO0FBRUEsU0FBU0csc0JBQXNCSixJQUFJLEVBQUVDLEtBQUssRUFBRUMsU0FBUztJQUNuRCxJQUFJRCxNQUFNRSxJQUFJLEtBQUtILEtBQUtHLElBQUksRUFBRTtRQUM1QkYsUUFBUTtZQUNORSxNQUFNSCxLQUFLRyxJQUFJO1lBQ2ZaLE9BQU8sQ0FBQyxHQUFHRyxtQkFBbUJJLE9BQU8sRUFBRUcsTUFBTVYsS0FBSyxFQUFFVSxNQUFNSSxJQUFJLEVBQUVMLEtBQUtLLElBQUksRUFBRUg7WUFDM0VHLE1BQU1MLEtBQUtLLElBQUk7UUFDakI7SUFDRjtJQUNBLE9BQU87UUFBRUwsTUFBTUE7UUFBTUMsT0FBT0E7SUFBTTtBQUNwQztBQUVBWCxrQkFBZSxHQUFHUztBQUNsQk8sT0FBT2hCLE9BQU8sR0FBR0EsT0FBTyxDQUFDLFVBQVUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdHJhdGZvcmRfYWkvLi9ub2RlX21vZHVsZXMvLnBucG0vcmVkdWNlLWNzcy1jYWxjQDIuMS44L25vZGVfbW9kdWxlcy9yZWR1Y2UtY3NzLWNhbGMvZGlzdC9saWIvY29udmVydC5qcz8xNjRkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jc3NVbml0Q29udmVydGVyID0gcmVxdWlyZSgnY3NzLXVuaXQtY29udmVydGVyJyk7XG5cbnZhciBfY3NzVW5pdENvbnZlcnRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jc3NVbml0Q29udmVydGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gY29udmVydE5vZGVzKGxlZnQsIHJpZ2h0LCBwcmVjaXNpb24pIHtcbiAgc3dpdGNoIChsZWZ0LnR5cGUpIHtcbiAgICBjYXNlICdMZW5ndGhWYWx1ZSc6XG4gICAgY2FzZSAnQW5nbGVWYWx1ZSc6XG4gICAgY2FzZSAnVGltZVZhbHVlJzpcbiAgICBjYXNlICdGcmVxdWVuY3lWYWx1ZSc6XG4gICAgY2FzZSAnUmVzb2x1dGlvblZhbHVlJzpcbiAgICAgIHJldHVybiBjb252ZXJ0QWJzb2x1dGVMZW5ndGgobGVmdCwgcmlnaHQsIHByZWNpc2lvbik7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB7IGxlZnQ6IGxlZnQsIHJpZ2h0OiByaWdodCB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRBYnNvbHV0ZUxlbmd0aChsZWZ0LCByaWdodCwgcHJlY2lzaW9uKSB7XG4gIGlmIChyaWdodC50eXBlID09PSBsZWZ0LnR5cGUpIHtcbiAgICByaWdodCA9IHtcbiAgICAgIHR5cGU6IGxlZnQudHlwZSxcbiAgICAgIHZhbHVlOiAoMCwgX2Nzc1VuaXRDb252ZXJ0ZXIyLmRlZmF1bHQpKHJpZ2h0LnZhbHVlLCByaWdodC51bml0LCBsZWZ0LnVuaXQsIHByZWNpc2lvbiksXG4gICAgICB1bml0OiBsZWZ0LnVuaXRcbiAgICB9O1xuICB9XG4gIHJldHVybiB7IGxlZnQ6IGxlZnQsIHJpZ2h0OiByaWdodCB9O1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBjb252ZXJ0Tm9kZXM7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfY3NzVW5pdENvbnZlcnRlciIsInJlcXVpcmUiLCJfY3NzVW5pdENvbnZlcnRlcjIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjb252ZXJ0Tm9kZXMiLCJsZWZ0IiwicmlnaHQiLCJwcmVjaXNpb24iLCJ0eXBlIiwiY29udmVydEFic29sdXRlTGVuZ3RoIiwidW5pdCIsIm1vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/reduce-css-calc@2.1.8/node_modules/reduce-css-calc/dist/lib/convert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/reduce-css-calc@2.1.8/node_modules/reduce-css-calc/dist/lib/reducer.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/reduce-css-calc@2.1.8/node_modules/reduce-css-calc/dist/lib/reducer.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.flip = flip;\nvar _convert = __webpack_require__(/*! ./convert */ \"(ssr)/./node_modules/.pnpm/reduce-css-calc@2.1.8/node_modules/reduce-css-calc/dist/lib/convert.js\");\nvar _convert2 = _interopRequireDefault(_convert);\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction reduce(node, precision) {\n    if (node.type === \"MathExpression\") return reduceMathExpression(node, precision);\n    if (node.type === \"Calc\") return reduce(node.value, precision);\n    return node;\n}\nfunction isEqual(left, right) {\n    return left.type === right.type && left.value === right.value;\n}\nfunction isValueType(type) {\n    switch(type){\n        case \"LengthValue\":\n        case \"AngleValue\":\n        case \"TimeValue\":\n        case \"FrequencyValue\":\n        case \"ResolutionValue\":\n        case \"EmValue\":\n        case \"ExValue\":\n        case \"ChValue\":\n        case \"RemValue\":\n        case \"VhValue\":\n        case \"VwValue\":\n        case \"VminValue\":\n        case \"VmaxValue\":\n        case \"PercentageValue\":\n        case \"Value\":\n            return true;\n    }\n    return false;\n}\nfunction convertMathExpression(node, precision) {\n    var nodes = (0, _convert2.default)(node.left, node.right, precision);\n    var left = reduce(nodes.left, precision);\n    var right = reduce(nodes.right, precision);\n    if (left.type === \"MathExpression\" && right.type === \"MathExpression\") {\n        if (left.operator === \"/\" && right.operator === \"*\" || left.operator === \"-\" && right.operator === \"+\" || left.operator === \"*\" && right.operator === \"/\" || left.operator === \"+\" && right.operator === \"-\") {\n            if (isEqual(left.right, right.right)) nodes = (0, _convert2.default)(left.left, right.left, precision);\n            else if (isEqual(left.right, right.left)) nodes = (0, _convert2.default)(left.left, right.right, precision);\n            left = reduce(nodes.left, precision);\n            right = reduce(nodes.right, precision);\n        }\n    }\n    node.left = left;\n    node.right = right;\n    return node;\n}\nfunction flip(operator) {\n    return operator === \"+\" ? \"-\" : \"+\";\n}\nfunction flipValue(node) {\n    if (isValueType(node.type)) node.value = -node.value;\n    else if (node.type == \"MathExpression\") {\n        node.left = flipValue(node.left);\n        node.right = flipValue(node.right);\n    }\n    return node;\n}\nfunction reduceAddSubExpression(node, precision) {\n    var _node = node, left = _node.left, right = _node.right, op = _node.operator;\n    if (left.type === \"CssVariable\" || right.type === \"CssVariable\") return node;\n    // something + 0 => something\n    // something - 0 => something\n    if (right.value === 0) return left;\n    // 0 + something => something\n    if (left.value === 0 && op === \"+\") return right;\n    // 0 - something => -something\n    if (left.value === 0 && op === \"-\") return flipValue(right);\n    // value + value\n    // value - value\n    if (left.type === right.type && isValueType(left.type)) {\n        node = Object.assign({}, left);\n        if (op === \"+\") node.value = left.value + right.value;\n        else node.value = left.value - right.value;\n    }\n    // value <op> (expr)\n    if (isValueType(left.type) && (right.operator === \"+\" || right.operator === \"-\") && right.type === \"MathExpression\") {\n        // value + (value + something) => (value + value) + something\n        // value + (value - something) => (value + value) - something\n        // value - (value + something) => (value - value) - something\n        // value - (value - something) => (value - value) + something\n        if (left.type === right.left.type) {\n            node = Object.assign({}, node);\n            node.left = reduce({\n                type: \"MathExpression\",\n                operator: op,\n                left: left,\n                right: right.left\n            }, precision);\n            node.right = right.right;\n            node.operator = op === \"-\" ? flip(right.operator) : right.operator;\n            return reduce(node, precision);\n        } else if (left.type === right.right.type) {\n            node = Object.assign({}, node);\n            node.left = reduce({\n                type: \"MathExpression\",\n                operator: op === \"-\" ? flip(right.operator) : right.operator,\n                left: left,\n                right: right.right\n            }, precision);\n            node.right = right.left;\n            return reduce(node, precision);\n        }\n    }\n    // (expr) <op> value\n    if (left.type === \"MathExpression\" && (left.operator === \"+\" || left.operator === \"-\") && isValueType(right.type)) {\n        // (value + something) + value => (value + value) + something\n        // (value - something) + value => (value + value) - something\n        // (value + something) - value => (value - value) + something\n        // (value - something) - value => (value - value) - something\n        if (right.type === left.left.type) {\n            node = Object.assign({}, left);\n            node.left = reduce({\n                type: \"MathExpression\",\n                operator: op,\n                left: left.left,\n                right: right\n            }, precision);\n            return reduce(node, precision);\n        } else if (right.type === left.right.type) {\n            node = Object.assign({}, left);\n            if (left.operator === \"-\") {\n                node.right = reduce({\n                    type: \"MathExpression\",\n                    operator: op === \"-\" ? \"+\" : \"-\",\n                    left: right,\n                    right: left.right\n                }, precision);\n                node.operator = op === \"-\" ? \"-\" : \"+\";\n            } else {\n                node.right = reduce({\n                    type: \"MathExpression\",\n                    operator: op,\n                    left: left.right,\n                    right: right\n                }, precision);\n            }\n            if (node.right.value < 0) {\n                node.right.value *= -1;\n                node.operator = node.operator === \"-\" ? \"+\" : \"-\";\n            }\n            return reduce(node, precision);\n        }\n    }\n    return node;\n}\nfunction reduceDivisionExpression(node, precision) {\n    if (!isValueType(node.right.type)) return node;\n    if (node.right.type !== \"Value\") throw new Error('Cannot divide by \"' + node.right.unit + '\", number expected');\n    if (node.right.value === 0) throw new Error(\"Cannot divide by zero\");\n    // (expr) / value\n    if (node.left.type === \"MathExpression\") {\n        if (isValueType(node.left.left.type) && isValueType(node.left.right.type)) {\n            node.left.left.value /= node.right.value;\n            node.left.right.value /= node.right.value;\n            return reduce(node.left, precision);\n        }\n        return node;\n    } else if (isValueType(node.left.type)) {\n        node.left.value /= node.right.value;\n        return node.left;\n    }\n    return node;\n}\nfunction reduceMultiplicationExpression(node) {\n    // (expr) * value\n    if (node.left.type === \"MathExpression\" && node.right.type === \"Value\") {\n        if (isValueType(node.left.left.type) && isValueType(node.left.right.type)) {\n            node.left.left.value *= node.right.value;\n            node.left.right.value *= node.right.value;\n            return node.left;\n        }\n    } else if (isValueType(node.left.type) && node.right.type === \"Value\") {\n        node.left.value *= node.right.value;\n        return node.left;\n    } else if (node.left.type === \"Value\" && node.right.type === \"MathExpression\") {\n        if (isValueType(node.right.left.type) && isValueType(node.right.right.type)) {\n            node.right.left.value *= node.left.value;\n            node.right.right.value *= node.left.value;\n            return node.right;\n        }\n    } else if (node.left.type === \"Value\" && isValueType(node.right.type)) {\n        node.right.value *= node.left.value;\n        return node.right;\n    }\n    return node;\n}\nfunction reduceMathExpression(node, precision) {\n    node = convertMathExpression(node, precision);\n    switch(node.operator){\n        case \"+\":\n        case \"-\":\n            return reduceAddSubExpression(node, precision);\n        case \"/\":\n            return reduceDivisionExpression(node, precision);\n        case \"*\":\n            return reduceMultiplicationExpression(node);\n    }\n    return node;\n}\nexports[\"default\"] = reduce;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/reduce-css-calc@2.1.8/node_modules/reduce-css-calc/dist/lib/reducer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/reduce-css-calc@2.1.8/node_modules/reduce-css-calc/dist/lib/stringifier.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/reduce-css-calc@2.1.8/node_modules/reduce-css-calc/dist/lib/stringifier.js ***!
  \*******************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = function(calc, node, precision) {\n    var str = stringify(node, precision);\n    if (node.type === \"MathExpression\") {\n        // if calc expression couldn't be resolved to a single value, re-wrap it as\n        // a calc()\n        str = calc + \"(\" + str + \")\";\n    }\n    return str;\n};\nvar _reducer = __webpack_require__(/*! ./reducer */ \"(ssr)/./node_modules/.pnpm/reduce-css-calc@2.1.8/node_modules/reduce-css-calc/dist/lib/reducer.js\");\nvar order = {\n    \"*\": 0,\n    \"/\": 0,\n    \"+\": 1,\n    \"-\": 1\n};\nfunction round(value, prec) {\n    if (prec !== false) {\n        var precision = Math.pow(10, prec);\n        return Math.round(value * precision) / precision;\n    }\n    return value;\n}\nfunction stringify(node, prec) {\n    switch(node.type){\n        case \"MathExpression\":\n            {\n                var left = node.left, right = node.right, op = node.operator;\n                var str = \"\";\n                if (left.type === \"MathExpression\" && order[op] < order[left.operator]) str += \"(\" + stringify(left, prec) + \")\";\n                else str += stringify(left, prec);\n                str += \" \" + node.operator + \" \";\n                if (right.type === \"MathExpression\" && order[op] < order[right.operator]) {\n                    str += \"(\" + stringify(right, prec) + \")\";\n                } else if (right.type === \"MathExpression\" && op === \"-\" && [\n                    \"+\",\n                    \"-\"\n                ].includes(right.operator)) {\n                    // fix #52 : a-(b+c) = a-b-c\n                    right.operator = (0, _reducer.flip)(right.operator);\n                    str += stringify(right, prec);\n                } else {\n                    str += stringify(right, prec);\n                }\n                return str;\n            }\n        case \"Value\":\n            return round(node.value, prec);\n        case \"CssVariable\":\n            if (node.fallback) {\n                return \"var(\" + node.value + \", \" + stringify(node.fallback, prec, true) + \")\";\n            }\n            return \"var(\" + node.value + \")\";\n        case \"Calc\":\n            if (node.prefix) {\n                return \"-\" + node.prefix + \"-calc(\" + stringify(node.value, prec) + \")\";\n            }\n            return \"calc(\" + stringify(node.value, prec) + \")\";\n        default:\n            return round(node.value, prec) + node.unit;\n    }\n}\nmodule.exports = exports[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcmVkdWNlLWNzcy1jYWxjQDIuMS44L25vZGVfbW9kdWxlcy9yZWR1Y2UtY3NzLWNhbGMvZGlzdC9saWIvc3RyaW5naWZpZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBRUZELGtCQUFlLEdBQUcsU0FBVUcsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLFNBQVM7SUFDL0MsSUFBSUMsTUFBTUMsVUFBVUgsTUFBTUM7SUFFMUIsSUFBSUQsS0FBS0ksSUFBSSxLQUFLLGtCQUFrQjtRQUNsQywyRUFBMkU7UUFDM0UsV0FBVztRQUNYRixNQUFNSCxPQUFPLE1BQU1HLE1BQU07SUFDM0I7SUFDQSxPQUFPQTtBQUNUO0FBRUEsSUFBSUcsV0FBV0MsbUJBQU9BLENBQUMsb0hBQVc7QUFFbEMsSUFBSUMsUUFBUTtJQUNWLEtBQUs7SUFDTCxLQUFLO0lBQ0wsS0FBSztJQUNMLEtBQUs7QUFDUDtBQUVBLFNBQVNDLE1BQU1YLEtBQUssRUFBRVksSUFBSTtJQUN4QixJQUFJQSxTQUFTLE9BQU87UUFDbEIsSUFBSVIsWUFBWVMsS0FBS0MsR0FBRyxDQUFDLElBQUlGO1FBQzdCLE9BQU9DLEtBQUtGLEtBQUssQ0FBQ1gsUUFBUUksYUFBYUE7SUFDekM7SUFDQSxPQUFPSjtBQUNUO0FBRUEsU0FBU00sVUFBVUgsSUFBSSxFQUFFUyxJQUFJO0lBQzNCLE9BQVFULEtBQUtJLElBQUk7UUFDZixLQUFLO1lBQ0g7Z0JBQ0UsSUFBSVEsT0FBT1osS0FBS1ksSUFBSSxFQUNoQkMsUUFBUWIsS0FBS2EsS0FBSyxFQUNsQkMsS0FBS2QsS0FBS2UsUUFBUTtnQkFFdEIsSUFBSWIsTUFBTTtnQkFFVixJQUFJVSxLQUFLUixJQUFJLEtBQUssb0JBQW9CRyxLQUFLLENBQUNPLEdBQUcsR0FBR1AsS0FBSyxDQUFDSyxLQUFLRyxRQUFRLENBQUMsRUFBRWIsT0FBTyxNQUFNQyxVQUFVUyxNQUFNSCxRQUFRO3FCQUFTUCxPQUFPQyxVQUFVUyxNQUFNSDtnQkFFN0lQLE9BQU8sTUFBTUYsS0FBS2UsUUFBUSxHQUFHO2dCQUU3QixJQUFJRixNQUFNVCxJQUFJLEtBQUssb0JBQW9CRyxLQUFLLENBQUNPLEdBQUcsR0FBR1AsS0FBSyxDQUFDTSxNQUFNRSxRQUFRLENBQUMsRUFBRTtvQkFDeEViLE9BQU8sTUFBTUMsVUFBVVUsT0FBT0osUUFBUTtnQkFDeEMsT0FBTyxJQUFJSSxNQUFNVCxJQUFJLEtBQUssb0JBQW9CVSxPQUFPLE9BQU87b0JBQUM7b0JBQUs7aUJBQUksQ0FBQ0UsUUFBUSxDQUFDSCxNQUFNRSxRQUFRLEdBQUc7b0JBQy9GLDRCQUE0QjtvQkFDNUJGLE1BQU1FLFFBQVEsR0FBRyxDQUFDLEdBQUdWLFNBQVNZLElBQUksRUFBRUosTUFBTUUsUUFBUTtvQkFDbERiLE9BQU9DLFVBQVVVLE9BQU9KO2dCQUMxQixPQUFPO29CQUNMUCxPQUFPQyxVQUFVVSxPQUFPSjtnQkFDMUI7Z0JBRUEsT0FBT1A7WUFDVDtRQUNGLEtBQUs7WUFDSCxPQUFPTSxNQUFNUixLQUFLSCxLQUFLLEVBQUVZO1FBQzNCLEtBQUs7WUFDSCxJQUFJVCxLQUFLa0IsUUFBUSxFQUFFO2dCQUNqQixPQUFPLFNBQVNsQixLQUFLSCxLQUFLLEdBQUcsT0FBT00sVUFBVUgsS0FBS2tCLFFBQVEsRUFBRVQsTUFBTSxRQUFRO1lBQzdFO1lBQ0EsT0FBTyxTQUFTVCxLQUFLSCxLQUFLLEdBQUc7UUFDL0IsS0FBSztZQUNILElBQUlHLEtBQUttQixNQUFNLEVBQUU7Z0JBQ2YsT0FBTyxNQUFNbkIsS0FBS21CLE1BQU0sR0FBRyxXQUFXaEIsVUFBVUgsS0FBS0gsS0FBSyxFQUFFWSxRQUFRO1lBQ3RFO1lBQ0EsT0FBTyxVQUFVTixVQUFVSCxLQUFLSCxLQUFLLEVBQUVZLFFBQVE7UUFDakQ7WUFDRSxPQUFPRCxNQUFNUixLQUFLSCxLQUFLLEVBQUVZLFFBQVFULEtBQUtvQixJQUFJO0lBQzlDO0FBQ0Y7QUFFQUMsT0FBT3pCLE9BQU8sR0FBR0EsT0FBTyxDQUFDLFVBQVUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdHJhdGZvcmRfYWkvLi9ub2RlX21vZHVsZXMvLnBucG0vcmVkdWNlLWNzcy1jYWxjQDIuMS44L25vZGVfbW9kdWxlcy9yZWR1Y2UtY3NzLWNhbGMvZGlzdC9saWIvc3RyaW5naWZpZXIuanM/YTY3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGNhbGMsIG5vZGUsIHByZWNpc2lvbikge1xuICB2YXIgc3RyID0gc3RyaW5naWZ5KG5vZGUsIHByZWNpc2lvbik7XG5cbiAgaWYgKG5vZGUudHlwZSA9PT0gXCJNYXRoRXhwcmVzc2lvblwiKSB7XG4gICAgLy8gaWYgY2FsYyBleHByZXNzaW9uIGNvdWxkbid0IGJlIHJlc29sdmVkIHRvIGEgc2luZ2xlIHZhbHVlLCByZS13cmFwIGl0IGFzXG4gICAgLy8gYSBjYWxjKClcbiAgICBzdHIgPSBjYWxjICsgXCIoXCIgKyBzdHIgKyBcIilcIjtcbiAgfVxuICByZXR1cm4gc3RyO1xufTtcblxudmFyIF9yZWR1Y2VyID0gcmVxdWlyZShcIi4vcmVkdWNlclwiKTtcblxudmFyIG9yZGVyID0ge1xuICBcIipcIjogMCxcbiAgXCIvXCI6IDAsXG4gIFwiK1wiOiAxLFxuICBcIi1cIjogMVxufTtcblxuZnVuY3Rpb24gcm91bmQodmFsdWUsIHByZWMpIHtcbiAgaWYgKHByZWMgIT09IGZhbHNlKSB7XG4gICAgdmFyIHByZWNpc2lvbiA9IE1hdGgucG93KDEwLCBwcmVjKTtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIHByZWNpc2lvbikgLyBwcmVjaXNpb247XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnkobm9kZSwgcHJlYykge1xuICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgIGNhc2UgXCJNYXRoRXhwcmVzc2lvblwiOlxuICAgICAge1xuICAgICAgICB2YXIgbGVmdCA9IG5vZGUubGVmdCxcbiAgICAgICAgICAgIHJpZ2h0ID0gbm9kZS5yaWdodCxcbiAgICAgICAgICAgIG9wID0gbm9kZS5vcGVyYXRvcjtcblxuICAgICAgICB2YXIgc3RyID0gXCJcIjtcblxuICAgICAgICBpZiAobGVmdC50eXBlID09PSAnTWF0aEV4cHJlc3Npb24nICYmIG9yZGVyW29wXSA8IG9yZGVyW2xlZnQub3BlcmF0b3JdKSBzdHIgKz0gXCIoXCIgKyBzdHJpbmdpZnkobGVmdCwgcHJlYykgKyBcIilcIjtlbHNlIHN0ciArPSBzdHJpbmdpZnkobGVmdCwgcHJlYyk7XG5cbiAgICAgICAgc3RyICs9IFwiIFwiICsgbm9kZS5vcGVyYXRvciArIFwiIFwiO1xuXG4gICAgICAgIGlmIChyaWdodC50eXBlID09PSAnTWF0aEV4cHJlc3Npb24nICYmIG9yZGVyW29wXSA8IG9yZGVyW3JpZ2h0Lm9wZXJhdG9yXSkge1xuICAgICAgICAgIHN0ciArPSBcIihcIiArIHN0cmluZ2lmeShyaWdodCwgcHJlYykgKyBcIilcIjtcbiAgICAgICAgfSBlbHNlIGlmIChyaWdodC50eXBlID09PSAnTWF0aEV4cHJlc3Npb24nICYmIG9wID09PSBcIi1cIiAmJiBbXCIrXCIsIFwiLVwiXS5pbmNsdWRlcyhyaWdodC5vcGVyYXRvcikpIHtcbiAgICAgICAgICAvLyBmaXggIzUyIDogYS0oYitjKSA9IGEtYi1jXG4gICAgICAgICAgcmlnaHQub3BlcmF0b3IgPSAoMCwgX3JlZHVjZXIuZmxpcCkocmlnaHQub3BlcmF0b3IpO1xuICAgICAgICAgIHN0ciArPSBzdHJpbmdpZnkocmlnaHQsIHByZWMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciArPSBzdHJpbmdpZnkocmlnaHQsIHByZWMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgIH1cbiAgICBjYXNlIFwiVmFsdWVcIjpcbiAgICAgIHJldHVybiByb3VuZChub2RlLnZhbHVlLCBwcmVjKTtcbiAgICBjYXNlICdDc3NWYXJpYWJsZSc6XG4gICAgICBpZiAobm9kZS5mYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gXCJ2YXIoXCIgKyBub2RlLnZhbHVlICsgXCIsIFwiICsgc3RyaW5naWZ5KG5vZGUuZmFsbGJhY2ssIHByZWMsIHRydWUpICsgXCIpXCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gXCJ2YXIoXCIgKyBub2RlLnZhbHVlICsgXCIpXCI7XG4gICAgY2FzZSAnQ2FsYyc6XG4gICAgICBpZiAobm9kZS5wcmVmaXgpIHtcbiAgICAgICAgcmV0dXJuIFwiLVwiICsgbm9kZS5wcmVmaXggKyBcIi1jYWxjKFwiICsgc3RyaW5naWZ5KG5vZGUudmFsdWUsIHByZWMpICsgXCIpXCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gXCJjYWxjKFwiICsgc3RyaW5naWZ5KG5vZGUudmFsdWUsIHByZWMpICsgXCIpXCI7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiByb3VuZChub2RlLnZhbHVlLCBwcmVjKSArIG5vZGUudW5pdDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJjYWxjIiwibm9kZSIsInByZWNpc2lvbiIsInN0ciIsInN0cmluZ2lmeSIsInR5cGUiLCJfcmVkdWNlciIsInJlcXVpcmUiLCJvcmRlciIsInJvdW5kIiwicHJlYyIsIk1hdGgiLCJwb3ciLCJsZWZ0IiwicmlnaHQiLCJvcCIsIm9wZXJhdG9yIiwiaW5jbHVkZXMiLCJmbGlwIiwiZmFsbGJhY2siLCJwcmVmaXgiLCJ1bml0IiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/reduce-css-calc@2.1.8/node_modules/reduce-css-calc/dist/lib/stringifier.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/reduce-css-calc@2.1.8/node_modules/reduce-css-calc/dist/parser.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/reduce-css-calc@2.1.8/node_modules/reduce-css-calc/dist/parser.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/* parser generated by jison 0.6.1-215 */ /*\n * Returns a Parser object of the following structure:\n *\n *  Parser: {\n *    yy: {}     The so-called \"shared state\" or rather the *source* of it;\n *               the real \"shared state\" `yy` passed around to\n *               the rule actions, etc. is a derivative/copy of this one,\n *               not a direct reference!\n *  }\n *\n *  Parser.prototype: {\n *    yy: {},\n *    EOF: 1,\n *    TERROR: 2,\n *\n *    trace: function(errorMessage, ...),\n *\n *    JisonParserError: function(msg, hash),\n *\n *    quoteName: function(name),\n *               Helper function which can be overridden by user code later on: put suitable\n *               quotes around literal IDs in a description string.\n *\n *    originalQuoteName: function(name),\n *               The basic quoteName handler provided by JISON.\n *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function\n *               at the end of the `parse()`.\n *\n *    describeSymbol: function(symbol),\n *               Return a more-or-less human-readable description of the given symbol, when\n *               available, or the symbol itself, serving as its own 'description' for lack\n *               of something better to serve up.\n *\n *               Return NULL when the symbol is unknown to the parser.\n *\n *    symbols_: {associative list: name ==> number},\n *    terminals_: {associative list: number ==> name},\n *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},\n *    terminal_descriptions_: (if there are any) {associative list: number ==> description},\n *    productions_: [...],\n *\n *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack),\n *\n *               The function parameters and `this` have the following value/meaning:\n *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)\n *                             to store/reference the rule value `$$` and location info `@$`.\n *\n *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets\n *                 to see the same object via the `this` reference, i.e. if you wish to carry custom\n *                 data from one reduce action through to the next within a single parse run, then you\n *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.\n *\n *                 `this.yy` is a direct reference to the `yy` shared state object.\n *\n *                 `%parse-param`-specified additional `parse()` arguments have been added to this `yy`\n *                 object at `parse()` start and are therefore available to the action code via the\n *                 same named `yy.xxxx` attributes (where `xxxx` represents a identifier name from\n *                 the %parse-param` list.\n *\n *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used\n *                             to match this rule. This is *not* the look-ahead token, but the last token\n *                             that's actually part of this rule.\n *\n *                 Formulated another way, `yytext` is the value of the token immediately preceeding\n *                 the current look-ahead token.\n *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.\n *\n *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.\n *\n *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.\n *\n *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.\n *\n *                               WARNING: since jison 0.4.18-186 this entry may be NULL/UNDEFINED instead\n *                               of an empty object when no suitable location info can be provided.\n *\n *               - `yystate` : the current parser state number, used internally for dispatching and\n *                               executing the action code chunk matching the rule currently being reduced.\n *\n *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')\n *\n *                 This one comes in handy when you are going to do advanced things to the parser\n *                 stacks, all of which are accessible from your action code (see the next entries below).\n *\n *                 Also note that you can access this and other stack index values using the new double-hash\n *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things\n *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.\n *                 This is made available to write very advanced grammar action rules, e.g. when you want\n *                 to investigate the parse state stack in your action code, which would, for example,\n *                 be relevant when you wish to implement error diagnostics and reporting schemes similar\n *                 to the work described here:\n *\n *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.\n *                   In Journées Francophones des Languages Applicatifs.\n *\n *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.\n *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.\n *\n *               - `yyrulelength`: the current rule's term count, i.e. the number of entries occupied on the stack.\n *\n *                 This one comes in handy when you are going to do advanced things to the parser\n *                 stacks, all of which are accessible from your action code (see the next entries below).\n *\n *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.\n *                             constructs.\n *\n *               - `yylstack`: reference to the parser token location stack. Also accessed via\n *                             the `@1` etc. constructs.\n *\n *                             WARNING: since jison 0.4.18-186 this array MAY contain slots which are\n *                             UNDEFINED rather than an empty (location) object, when the lexer/parser\n *                             action code did not provide a suitable location info object when such a\n *                             slot was filled!\n *\n *               - `yystack` : reference to the parser token id stack. Also accessed via the\n *                             `#1` etc. constructs.\n *\n *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to\n *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might\n *                 want access this array for your own purposes, such as error analysis as mentioned above!\n *\n *                 Note that this stack stores the current stack of *tokens*, that is the sequence of\n *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*\n *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and\n *                 *reduced*.\n *\n *               - `yysstack`: reference to the parser state stack. This one carries the internal parser\n *                             *states* such as the one in `yystate`, which are used to represent\n *                             the parser state machine in the *parse table*. *Very* *internal* stuff,\n *                             what can I say? If you access this one, you're clearly doing wicked things\n *\n *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your\n *                             grammar definition file.\n *\n *    table: [...],\n *               State transition table\n *               ----------------------\n *\n *               index levels are:\n *               - `state`  --> hash table\n *               - `symbol` --> action (number or array)\n *\n *                 If the `action` is an array, these are the elements' meaning:\n *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept\n *                 - index [1]: GOTO `state`\n *\n *                 If the `action` is a number, it is the GOTO `state`\n *\n *    defaultActions: {...},\n *\n *    parseError: function(str, hash, ExceptionClass),\n *    yyError: function(str, ...),\n *    yyRecovering: function(),\n *    yyErrOk: function(),\n *    yyClearIn: function(),\n *\n *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),\n *               Helper function **which will be set up during the first invocation of the `parse()` method**.\n *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.\n *               See it's use in this parser kernel in many places; example usage:\n *\n *                   var infoObj = parser.constructParseErrorInfo('fail!', null,\n *                                     parser.collect_expected_token_set(state), true);\n *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);\n *\n *    originalParseError: function(str, hash, ExceptionClass),\n *               The basic `parseError` handler provided by JISON.\n *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function\n *               at the end of the `parse()`.\n *\n *    options: { ... parser %options ... },\n *\n *    parse: function(input[, args...]),\n *               Parse the given `input` and return the parsed value (or `true` when none was provided by\n *               the root action, in which case the parser is acting as a *matcher*).\n *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:\n *               these extra `args...` are added verbatim to the `yy` object reference as member variables.\n *\n *               WARNING:\n *               Parser's additional `args...` parameters (via `%parse-param`) MAY conflict with\n *               any attributes already added to `yy` by the jison run-time;\n *               when such a collision is detected an exception is thrown to prevent the generated run-time\n *               from silently accepting this confusing and potentially hazardous situation!\n *\n *               The lexer MAY add its own set of additional parameters (via the `%parse-param` line in\n *               the lexer section of the grammar spec): these will be inserted in the `yy` shared state\n *               object and any collision with those will be reported by the lexer via a thrown exception.\n *\n *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),\n *               Helper function **which will be set up during the first invocation of the `parse()` method**.\n *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown\n *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY\n *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and\n *               the internal parser gets properly garbage collected under these particular circumstances.\n *\n *    yyMergeLocationInfo: function(first_index, last_index, first_yylloc, last_yylloc, dont_look_back),\n *               Helper function **which will be set up during the first invocation of the `parse()` method**.\n *               This helper API can be invoked to calculate a spanning `yylloc` location info object.\n *\n *               Note: %epsilon rules MAY specify no `first_index` and `first_yylloc`, in which case\n *               this function will attempt to obtain a suitable location marker by inspecting the location stack\n *               backwards.\n *\n *               For more info see the documentation comment further below, immediately above this function's\n *               implementation.\n *\n *    lexer: {\n *        yy: {...},           A reference to the so-called \"shared state\" `yy` once\n *                             received via a call to the `.setInput(input, yy)` lexer API.\n *        EOF: 1,\n *        ERROR: 2,\n *        JisonLexerError: function(msg, hash),\n *        parseError: function(str, hash, ExceptionClass),\n *        setInput: function(input, [yy]),\n *        input: function(),\n *        unput: function(str),\n *        more: function(),\n *        reject: function(),\n *        less: function(n),\n *        pastInput: function(n),\n *        upcomingInput: function(n),\n *        showPosition: function(),\n *        test_match: function(regex_match_array, rule_index, ...),\n *        next: function(...),\n *        lex: function(...),\n *        begin: function(condition),\n *        pushState: function(condition),\n *        popState: function(),\n *        topState: function(),\n *        _currentRules: function(),\n *        stateStackSize: function(),\n *        cleanupAfterLex: function()\n *\n *        options: { ... lexer %options ... },\n *\n *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),\n *        rules: [...],\n *        conditions: {associative list: name ==> set},\n *    }\n *  }\n *\n *\n *  token location info (@$, _$, etc.): {\n *    first_line: n,\n *    last_line: n,\n *    first_column: n,\n *    last_column: n,\n *    range: [start_number, end_number]\n *               (where the numbers are indexes into the input string, zero-based)\n *  }\n *\n * ---\n *\n * The `parseError` function receives a 'hash' object with these members for lexer and\n * parser errors:\n *\n *  {\n *    text:        (matched text)\n *    token:       (the produced terminal token, if any)\n *    token_id:    (the produced terminal token numeric ID, if any)\n *    line:        (yylineno)\n *    loc:         (yylloc)\n *  }\n *\n * parser (grammar) errors will also provide these additional members:\n *\n *  {\n *    expected:    (array describing the set of expected tokens;\n *                  may be UNDEFINED when we cannot easily produce such a set)\n *    state:       (integer (or array when the table includes grammar collisions);\n *                  represents the current internal state of the parser kernel.\n *                  can, for example, be used to pass to the `collect_expected_token_set()`\n *                  API to obtain the expected token set)\n *    action:      (integer; represents the current internal action which will be executed)\n *    new_state:   (integer; represents the next/planned internal state, once the current\n *                  action has executed)\n *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule\n *                  available for this particular error)\n *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    yy:          (object: the current parser internal \"shared state\" `yy`\n *                  as is also available in the rule actions; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    lexer:       (reference to the current lexer instance used by the parser)\n *    parser:      (reference to the current parser instance)\n *  }\n *\n * while `this` will reference the current parser instance.\n *\n * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*\n * instance, while these additional `hash` fields will also be provided:\n *\n *  {\n *    lexer:       (reference to the current lexer instance which reported the error)\n *  }\n *\n * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired\n * from either the parser or lexer, `this` will still reference the related *parser*\n * instance, while these additional `hash` fields will also be provided:\n *\n *  {\n *    exception:   (reference to the exception thrown)\n *  }\n *\n * Please do note that in the latter situation, the `expected` field will be omitted as\n * this type of failure is assumed not to be due to *parse errors* but rather due to user\n * action code in either parser or lexer failing unexpectedly.\n *\n * ---\n *\n * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.\n * These options are available:\n *\n * ### options which are global for all parser instances\n *\n *  Parser.pre_parse: function(yy)\n *                 optional: you can specify a pre_parse() function in the chunk following\n *                 the grammar, i.e. after the last `%%`.\n *  Parser.post_parse: function(yy, retval, parseInfo) { return retval; }\n *                 optional: you can specify a post_parse() function in the chunk following\n *                 the grammar, i.e. after the last `%%`. When it does not return any value,\n *                 the parser will return the original `retval`.\n *\n * ### options which can be set up per parser instance\n *\n *  yy: {\n *      pre_parse:  function(yy)\n *                 optional: is invoked before the parse cycle starts (and before the first\n *                 invocation of `lex()`) but immediately after the invocation of\n *                 `parser.pre_parse()`).\n *      post_parse: function(yy, retval, parseInfo) { return retval; }\n *                 optional: is invoked when the parse terminates due to success ('accept')\n *                 or failure (even when exceptions are thrown).\n *                 `retval` contains the return value to be produced by `Parser.parse()`;\n *                 this function can override the return value by returning another.\n *                 When it does not return any value, the parser will return the original\n *                 `retval`.\n *                 This function is invoked immediately before `parser.post_parse()`.\n *\n *      parseError: function(str, hash, ExceptionClass)\n *                 optional: overrides the default `parseError` function.\n *      quoteName: function(name),\n *                 optional: overrides the default `quoteName` function.\n *  }\n *\n *  parser.lexer.options: {\n *      pre_lex:  function()\n *                 optional: is invoked before the lexer is invoked to produce another token.\n *                 `this` refers to the Lexer object.\n *      post_lex: function(token) { return token; }\n *                 optional: is invoked when the lexer has produced a token `token`;\n *                 this function can override the returned token value by returning another.\n *                 When it does not return any (truthy) value, the lexer will return\n *                 the original `token`.\n *                 `this` refers to the Lexer object.\n *\n *      ranges: boolean\n *                 optional: `true` ==> token location info will include a .range[] member.\n *      flex: boolean\n *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested\n *                 exhaustively to find the longest match.\n *      backtrack_lexer: boolean\n *                 optional: `true` ==> lexer regexes are tested in order and for invoked;\n *                 the lexer terminates the scan when a token is returned by the action code.\n *      xregexp: boolean\n *                 optional: `true` ==> lexer rule regexes are \"extended regex format\" requiring the\n *                 `XRegExp` library. When this `%option` has not been specified at compile time, all lexer\n *                 rule regexes have been written as standard JavaScript RegExp expressions.\n *  }\n */ var parser = function() {\n    // See also:\n    // http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508\n    // but we keep the prototype.constructor and prototype.name assignment lines too for compatibility\n    // with userland code which might access the derived class in a 'classic' way.\n    function JisonParserError(msg, hash) {\n        Object.defineProperty(this, \"name\", {\n            enumerable: false,\n            writable: false,\n            value: \"JisonParserError\"\n        });\n        if (msg == null) msg = \"???\";\n        Object.defineProperty(this, \"message\", {\n            enumerable: false,\n            writable: true,\n            value: msg\n        });\n        this.hash = hash;\n        var stacktrace;\n        if (hash && hash.exception instanceof Error) {\n            var ex2 = hash.exception;\n            this.message = ex2.message || msg;\n            stacktrace = ex2.stack;\n        }\n        if (!stacktrace) {\n            if (Error.hasOwnProperty(\"captureStackTrace\")) {\n                Error.captureStackTrace(this, this.constructor);\n            } else {\n                stacktrace = new Error(msg).stack;\n            }\n        }\n        if (stacktrace) {\n            Object.defineProperty(this, \"stack\", {\n                enumerable: false,\n                writable: false,\n                value: stacktrace\n            });\n        }\n    }\n    if (typeof Object.setPrototypeOf === \"function\") {\n        Object.setPrototypeOf(JisonParserError.prototype, Error.prototype);\n    } else {\n        JisonParserError.prototype = Object.create(Error.prototype);\n    }\n    JisonParserError.prototype.constructor = JisonParserError;\n    JisonParserError.prototype.name = \"JisonParserError\";\n    // helper: reconstruct the productions[] table\n    function bp(s) {\n        var rv = [];\n        var p = s.pop;\n        var r = s.rule;\n        for(var i = 0, l = p.length; i < l; i++){\n            rv.push([\n                p[i],\n                r[i]\n            ]);\n        }\n        return rv;\n    }\n    // helper: reconstruct the defaultActions[] table\n    function bda(s) {\n        var rv = {};\n        var d = s.idx;\n        var g = s.goto;\n        for(var i = 0, l = d.length; i < l; i++){\n            var j = d[i];\n            rv[j] = g[i];\n        }\n        return rv;\n    }\n    // helper: reconstruct the 'goto' table\n    function bt(s) {\n        var rv = [];\n        var d = s.len;\n        var y = s.symbol;\n        var t = s.type;\n        var a = s.state;\n        var m = s.mode;\n        var g = s.goto;\n        for(var i = 0, l = d.length; i < l; i++){\n            var n = d[i];\n            var q = {};\n            for(var j = 0; j < n; j++){\n                var z = y.shift();\n                switch(t.shift()){\n                    case 2:\n                        q[z] = [\n                            m.shift(),\n                            g.shift()\n                        ];\n                        break;\n                    case 0:\n                        q[z] = a.shift();\n                        break;\n                    default:\n                        // type === 1: accept\n                        q[z] = [\n                            3\n                        ];\n                }\n            }\n            rv.push(q);\n        }\n        return rv;\n    }\n    // helper: runlength encoding with increment step: code, length: step (default step = 0)\n    // `this` references an array\n    function s(c, l, a) {\n        a = a || 0;\n        for(var i = 0; i < l; i++){\n            this.push(c);\n            c += a;\n        }\n    }\n    // helper: duplicate sequence from *relative* offset and length.\n    // `this` references an array\n    function c(i, l) {\n        i = this.length - i;\n        for(l += i; i < l; i++){\n            this.push(this[i]);\n        }\n    }\n    // helper: unpack an array using helpers and data, all passed in an array argument 'a'.\n    function u(a) {\n        var rv = [];\n        for(var i = 0, l = a.length; i < l; i++){\n            var e = a[i];\n            // Is this entry a helper function?\n            if (typeof e === \"function\") {\n                i++;\n                e.apply(rv, a[i]);\n            } else {\n                rv.push(e);\n            }\n        }\n        return rv;\n    }\n    var parser = {\n        // Code Generator Information Report\n        // ---------------------------------\n        //\n        // Options:\n        //\n        //   default action mode: ............. [\"classic\",\"merge\"]\n        //   test-compile action mode: ........ \"parser:*,lexer:*\"\n        //   try..catch: ...................... true\n        //   default resolve on conflict: ..... true\n        //   on-demand look-ahead: ............ false\n        //   error recovery token skip maximum: 3\n        //   yyerror in parse actions is: ..... NOT recoverable,\n        //   yyerror in lexer actions and other non-fatal lexer are:\n        //   .................................. NOT recoverable,\n        //   debug grammar/output: ............ false\n        //   has partial LR conflict upgrade:   true\n        //   rudimentary token-stack support:   false\n        //   parser table compression mode: ... 2\n        //   export debug tables: ............. false\n        //   export *all* tables: ............. false\n        //   module type: ..................... commonjs\n        //   parser engine type: .............. lalr\n        //   output main() in the module: ..... true\n        //   has user-specified main(): ....... false\n        //   has user-specified require()/import modules for main():\n        //   .................................. false\n        //   number of expected conflicts: .... 0\n        //\n        //\n        // Parser Analysis flags:\n        //\n        //   no significant actions (parser is a language matcher only):\n        //   .................................. false\n        //   uses yyleng: ..................... false\n        //   uses yylineno: ................... false\n        //   uses yytext: ..................... false\n        //   uses yylloc: ..................... false\n        //   uses ParseError API: ............. false\n        //   uses YYERROR: .................... false\n        //   uses YYRECOVERING: ............... false\n        //   uses YYERROK: .................... false\n        //   uses YYCLEARIN: .................. false\n        //   tracks rule values: .............. true\n        //   assigns rule values: ............. true\n        //   uses location tracking: .......... false\n        //   assigns location: ................ false\n        //   uses yystack: .................... false\n        //   uses yysstack: ................... false\n        //   uses yysp: ....................... true\n        //   uses yyrulelength: ............... false\n        //   uses yyMergeLocationInfo API: .... false\n        //   has error recovery: .............. false\n        //   has error reporting: ............. false\n        //\n        // --------- END OF REPORT -----------\n        trace: function no_op_trace() {},\n        JisonParserError: JisonParserError,\n        yy: {},\n        options: {\n            type: \"lalr\",\n            hasPartialLrUpgradeOnConflict: true,\n            errorRecoveryTokenDiscardCount: 3\n        },\n        symbols_: {\n            \"$accept\": 0,\n            \"$end\": 1,\n            \"ADD\": 3,\n            \"ANGLE\": 16,\n            \"CHS\": 22,\n            \"COMMA\": 14,\n            \"CSS_CPROP\": 13,\n            \"CSS_VAR\": 12,\n            \"DIV\": 6,\n            \"EMS\": 20,\n            \"EOF\": 1,\n            \"EXS\": 21,\n            \"FREQ\": 18,\n            \"LENGTH\": 15,\n            \"LPAREN\": 7,\n            \"MUL\": 5,\n            \"NESTED_CALC\": 9,\n            \"NUMBER\": 11,\n            \"PERCENTAGE\": 28,\n            \"PREFIX\": 10,\n            \"REMS\": 23,\n            \"RES\": 19,\n            \"RPAREN\": 8,\n            \"SUB\": 4,\n            \"TIME\": 17,\n            \"VHS\": 24,\n            \"VMAXS\": 27,\n            \"VMINS\": 26,\n            \"VWS\": 25,\n            \"css_value\": 33,\n            \"css_variable\": 32,\n            \"error\": 2,\n            \"expression\": 29,\n            \"math_expression\": 30,\n            \"value\": 31\n        },\n        terminals_: {\n            1: \"EOF\",\n            2: \"error\",\n            3: \"ADD\",\n            4: \"SUB\",\n            5: \"MUL\",\n            6: \"DIV\",\n            7: \"LPAREN\",\n            8: \"RPAREN\",\n            9: \"NESTED_CALC\",\n            10: \"PREFIX\",\n            11: \"NUMBER\",\n            12: \"CSS_VAR\",\n            13: \"CSS_CPROP\",\n            14: \"COMMA\",\n            15: \"LENGTH\",\n            16: \"ANGLE\",\n            17: \"TIME\",\n            18: \"FREQ\",\n            19: \"RES\",\n            20: \"EMS\",\n            21: \"EXS\",\n            22: \"CHS\",\n            23: \"REMS\",\n            24: \"VHS\",\n            25: \"VWS\",\n            26: \"VMINS\",\n            27: \"VMAXS\",\n            28: \"PERCENTAGE\"\n        },\n        TERROR: 2,\n        EOF: 1,\n        // internals: defined here so the object *structure* doesn't get modified by parse() et al,\n        // thus helping JIT compilers like Chrome V8.\n        originalQuoteName: null,\n        originalParseError: null,\n        cleanupAfterParse: null,\n        constructParseErrorInfo: null,\n        yyMergeLocationInfo: null,\n        __reentrant_call_depth: 0,\n        __error_infos: [],\n        __error_recovery_infos: [],\n        // APIs which will be set up depending on user action code analysis:\n        //yyRecovering: 0,\n        //yyErrOk: 0,\n        //yyClearIn: 0,\n        // Helper APIs\n        // -----------\n        // Helper function which can be overridden by user code later on: put suitable quotes around\n        // literal IDs in a description string.\n        quoteName: function parser_quoteName(id_str) {\n            return '\"' + id_str + '\"';\n        },\n        // Return the name of the given symbol (terminal or non-terminal) as a string, when available.\n        //\n        // Return NULL when the symbol is unknown to the parser.\n        getSymbolName: function parser_getSymbolName(symbol) {\n            if (this.terminals_[symbol]) {\n                return this.terminals_[symbol];\n            }\n            // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.\n            //\n            // An example of this may be where a rule's action code contains a call like this:\n            //\n            //      parser.getSymbolName(#$)\n            //\n            // to obtain a human-readable name of the current grammar rule.\n            var s = this.symbols_;\n            for(var key in s){\n                if (s[key] === symbol) {\n                    return key;\n                }\n            }\n            return null;\n        },\n        // Return a more-or-less human-readable description of the given symbol, when available,\n        // or the symbol itself, serving as its own 'description' for lack of something better to serve up.\n        //\n        // Return NULL when the symbol is unknown to the parser.\n        describeSymbol: function parser_describeSymbol(symbol) {\n            if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {\n                return this.terminal_descriptions_[symbol];\n            } else if (symbol === this.EOF) {\n                return \"end of input\";\n            }\n            var id = this.getSymbolName(symbol);\n            if (id) {\n                return this.quoteName(id);\n            }\n            return null;\n        },\n        // Produce a (more or less) human-readable list of expected tokens at the point of failure.\n        //\n        // The produced list may contain token or token set descriptions instead of the tokens\n        // themselves to help turning this output into something that easier to read by humans\n        // unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,\n        // expected terminals and nonterminals is produced.\n        //\n        // The returned list (array) will not contain any duplicate entries.\n        collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {\n            var TERROR = this.TERROR;\n            var tokenset = [];\n            var check = {};\n            // Has this (error?) state been outfitted with a custom expectations description text for human consumption?\n            // If so, use that one instead of the less palatable token set.\n            if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) {\n                return [\n                    this.state_descriptions_[state]\n                ];\n            }\n            for(var p in this.table[state]){\n                p = +p;\n                if (p !== TERROR) {\n                    var d = do_not_describe ? p : this.describeSymbol(p);\n                    if (d && !check[d]) {\n                        tokenset.push(d);\n                        check[d] = true; // Mark this token description as already mentioned to prevent outputting duplicate entries.\n                    }\n                }\n            }\n            return tokenset;\n        },\n        productions_: bp({\n            pop: u([\n                29,\n                s,\n                [\n                    30,\n                    10\n                ],\n                31,\n                31,\n                32,\n                32,\n                s,\n                [\n                    33,\n                    15\n                ]\n            ]),\n            rule: u([\n                2,\n                s,\n                [\n                    3,\n                    5\n                ],\n                4,\n                7,\n                s,\n                [\n                    1,\n                    4\n                ],\n                2,\n                4,\n                6,\n                s,\n                [\n                    1,\n                    14\n                ],\n                2\n            ])\n        }),\n        performAction: function parser__PerformAction(yystate /* action[1] */ , yysp, yyvstack) {\n            /* this == yyval */ // the JS engine itself can go and remove these statements when `yy` turns out to be unused in any action code!\n            var yy = this.yy;\n            var yyparser = yy.parser;\n            var yylexer = yy.lexer;\n            switch(yystate){\n                case 0:\n                    /*! Production::    $accept : expression $end */ // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-):\n                    this.$ = yyvstack[yysp - 1];\n                    break;\n                case 1:\n                    /*! Production::    expression : math_expression EOF */ // default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-):\n                    this.$ = yyvstack[yysp - 1];\n                    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-)\n                    return yyvstack[yysp - 1];\n                    break;\n                case 2:\n                /*! Production::    math_expression : math_expression ADD math_expression */ case 3:\n                /*! Production::    math_expression : math_expression SUB math_expression */ case 4:\n                /*! Production::    math_expression : math_expression MUL math_expression */ case 5:\n                    /*! Production::    math_expression : math_expression DIV math_expression */ this.$ = {\n                        type: \"MathExpression\",\n                        operator: yyvstack[yysp - 1],\n                        left: yyvstack[yysp - 2],\n                        right: yyvstack[yysp]\n                    };\n                    break;\n                case 6:\n                    /*! Production::    math_expression : LPAREN math_expression RPAREN */ this.$ = yyvstack[yysp - 1];\n                    break;\n                case 7:\n                    /*! Production::    math_expression : NESTED_CALC LPAREN math_expression RPAREN */ this.$ = {\n                        type: \"Calc\",\n                        value: yyvstack[yysp - 1]\n                    };\n                    break;\n                case 8:\n                    /*! Production::    math_expression : SUB PREFIX SUB NESTED_CALC LPAREN math_expression RPAREN */ this.$ = {\n                        type: \"Calc\",\n                        value: yyvstack[yysp - 1],\n                        prefix: yyvstack[yysp - 5]\n                    };\n                    break;\n                case 9:\n                /*! Production::    math_expression : css_variable */ case 10:\n                /*! Production::    math_expression : css_value */ case 11:\n                    /*! Production::    math_expression : value */ this.$ = yyvstack[yysp];\n                    break;\n                case 12:\n                    /*! Production::    value : NUMBER */ this.$ = {\n                        type: \"Value\",\n                        value: parseFloat(yyvstack[yysp])\n                    };\n                    break;\n                case 13:\n                    /*! Production::    value : SUB NUMBER */ this.$ = {\n                        type: \"Value\",\n                        value: parseFloat(yyvstack[yysp]) * -1\n                    };\n                    break;\n                case 14:\n                    /*! Production::    css_variable : CSS_VAR LPAREN CSS_CPROP RPAREN */ this.$ = {\n                        type: \"CssVariable\",\n                        value: yyvstack[yysp - 1]\n                    };\n                    break;\n                case 15:\n                    /*! Production::    css_variable : CSS_VAR LPAREN CSS_CPROP COMMA math_expression RPAREN */ this.$ = {\n                        type: \"CssVariable\",\n                        value: yyvstack[yysp - 3],\n                        fallback: yyvstack[yysp - 1]\n                    };\n                    break;\n                case 16:\n                    /*! Production::    css_value : LENGTH */ this.$ = {\n                        type: \"LengthValue\",\n                        value: parseFloat(yyvstack[yysp]),\n                        unit: /[a-z]+/.exec(yyvstack[yysp])[0]\n                    };\n                    break;\n                case 17:\n                    /*! Production::    css_value : ANGLE */ this.$ = {\n                        type: \"AngleValue\",\n                        value: parseFloat(yyvstack[yysp]),\n                        unit: /[a-z]+/.exec(yyvstack[yysp])[0]\n                    };\n                    break;\n                case 18:\n                    /*! Production::    css_value : TIME */ this.$ = {\n                        type: \"TimeValue\",\n                        value: parseFloat(yyvstack[yysp]),\n                        unit: /[a-z]+/.exec(yyvstack[yysp])[0]\n                    };\n                    break;\n                case 19:\n                    /*! Production::    css_value : FREQ */ this.$ = {\n                        type: \"FrequencyValue\",\n                        value: parseFloat(yyvstack[yysp]),\n                        unit: /[a-z]+/.exec(yyvstack[yysp])[0]\n                    };\n                    break;\n                case 20:\n                    /*! Production::    css_value : RES */ this.$ = {\n                        type: \"ResolutionValue\",\n                        value: parseFloat(yyvstack[yysp]),\n                        unit: /[a-z]+/.exec(yyvstack[yysp])[0]\n                    };\n                    break;\n                case 21:\n                    /*! Production::    css_value : EMS */ this.$ = {\n                        type: \"EmValue\",\n                        value: parseFloat(yyvstack[yysp]),\n                        unit: \"em\"\n                    };\n                    break;\n                case 22:\n                    /*! Production::    css_value : EXS */ this.$ = {\n                        type: \"ExValue\",\n                        value: parseFloat(yyvstack[yysp]),\n                        unit: \"ex\"\n                    };\n                    break;\n                case 23:\n                    /*! Production::    css_value : CHS */ this.$ = {\n                        type: \"ChValue\",\n                        value: parseFloat(yyvstack[yysp]),\n                        unit: \"ch\"\n                    };\n                    break;\n                case 24:\n                    /*! Production::    css_value : REMS */ this.$ = {\n                        type: \"RemValue\",\n                        value: parseFloat(yyvstack[yysp]),\n                        unit: \"rem\"\n                    };\n                    break;\n                case 25:\n                    /*! Production::    css_value : VHS */ this.$ = {\n                        type: \"VhValue\",\n                        value: parseFloat(yyvstack[yysp]),\n                        unit: \"vh\"\n                    };\n                    break;\n                case 26:\n                    /*! Production::    css_value : VWS */ this.$ = {\n                        type: \"VwValue\",\n                        value: parseFloat(yyvstack[yysp]),\n                        unit: \"vw\"\n                    };\n                    break;\n                case 27:\n                    /*! Production::    css_value : VMINS */ this.$ = {\n                        type: \"VminValue\",\n                        value: parseFloat(yyvstack[yysp]),\n                        unit: \"vmin\"\n                    };\n                    break;\n                case 28:\n                    /*! Production::    css_value : VMAXS */ this.$ = {\n                        type: \"VmaxValue\",\n                        value: parseFloat(yyvstack[yysp]),\n                        unit: \"vmax\"\n                    };\n                    break;\n                case 29:\n                    /*! Production::    css_value : PERCENTAGE */ this.$ = {\n                        type: \"PercentageValue\",\n                        value: parseFloat(yyvstack[yysp]),\n                        unit: \"%\"\n                    };\n                    break;\n                case 30:\n                    /*! Production::    css_value : SUB css_value */ var prev = yyvstack[yysp];\n                    prev.value *= -1;\n                    this.$ = prev;\n                    break;\n            }\n        },\n        table: bt({\n            len: u([\n                24,\n                1,\n                5,\n                23,\n                1,\n                18,\n                s,\n                [\n                    0,\n                    3\n                ],\n                1,\n                s,\n                [\n                    0,\n                    16\n                ],\n                s,\n                [\n                    23,\n                    4\n                ],\n                c,\n                [\n                    28,\n                    3\n                ],\n                0,\n                0,\n                16,\n                1,\n                6,\n                6,\n                s,\n                [\n                    0,\n                    3\n                ],\n                5,\n                1,\n                2,\n                c,\n                [\n                    37,\n                    3\n                ],\n                c,\n                [\n                    20,\n                    3\n                ],\n                5,\n                0,\n                0\n            ]),\n            symbol: u([\n                4,\n                7,\n                9,\n                11,\n                12,\n                s,\n                [\n                    15,\n                    19,\n                    1\n                ],\n                1,\n                1,\n                s,\n                [\n                    3,\n                    4,\n                    1\n                ],\n                c,\n                [\n                    30,\n                    19\n                ],\n                c,\n                [\n                    29,\n                    4\n                ],\n                7,\n                4,\n                10,\n                11,\n                c,\n                [\n                    22,\n                    14\n                ],\n                c,\n                [\n                    19,\n                    3\n                ],\n                c,\n                [\n                    43,\n                    22\n                ],\n                c,\n                [\n                    23,\n                    69\n                ],\n                c,\n                [\n                    139,\n                    4\n                ],\n                8,\n                c,\n                [\n                    51,\n                    24\n                ],\n                4,\n                c,\n                [\n                    138,\n                    15\n                ],\n                13,\n                c,\n                [\n                    186,\n                    5\n                ],\n                8,\n                c,\n                [\n                    6,\n                    6\n                ],\n                c,\n                [\n                    5,\n                    5\n                ],\n                9,\n                8,\n                14,\n                c,\n                [\n                    159,\n                    47\n                ],\n                c,\n                [\n                    60,\n                    10\n                ]\n            ]),\n            type: u([\n                s,\n                [\n                    2,\n                    19\n                ],\n                s,\n                [\n                    0,\n                    5\n                ],\n                1,\n                s,\n                [\n                    2,\n                    24\n                ],\n                s,\n                [\n                    0,\n                    4\n                ],\n                c,\n                [\n                    22,\n                    19\n                ],\n                c,\n                [\n                    43,\n                    42\n                ],\n                c,\n                [\n                    23,\n                    70\n                ],\n                c,\n                [\n                    28,\n                    25\n                ],\n                c,\n                [\n                    45,\n                    25\n                ],\n                c,\n                [\n                    113,\n                    54\n                ]\n            ]),\n            state: u([\n                1,\n                2,\n                8,\n                6,\n                7,\n                30,\n                c,\n                [\n                    4,\n                    3\n                ],\n                33,\n                37,\n                c,\n                [\n                    5,\n                    3\n                ],\n                38,\n                c,\n                [\n                    4,\n                    3\n                ],\n                39,\n                c,\n                [\n                    4,\n                    3\n                ],\n                40,\n                c,\n                [\n                    4,\n                    3\n                ],\n                42,\n                c,\n                [\n                    21,\n                    4\n                ],\n                50,\n                c,\n                [\n                    5,\n                    3\n                ],\n                51,\n                c,\n                [\n                    4,\n                    3\n                ]\n            ]),\n            mode: u([\n                s,\n                [\n                    1,\n                    179\n                ],\n                s,\n                [\n                    2,\n                    3\n                ],\n                c,\n                [\n                    5,\n                    5\n                ],\n                c,\n                [\n                    6,\n                    4\n                ],\n                s,\n                [\n                    1,\n                    57\n                ]\n            ]),\n            goto: u([\n                5,\n                3,\n                4,\n                24,\n                s,\n                [\n                    9,\n                    15,\n                    1\n                ],\n                s,\n                [\n                    25,\n                    5,\n                    1\n                ],\n                c,\n                [\n                    24,\n                    19\n                ],\n                31,\n                35,\n                32,\n                34,\n                c,\n                [\n                    18,\n                    14\n                ],\n                36,\n                c,\n                [\n                    38,\n                    19\n                ],\n                c,\n                [\n                    19,\n                    57\n                ],\n                c,\n                [\n                    118,\n                    4\n                ],\n                41,\n                c,\n                [\n                    24,\n                    19\n                ],\n                43,\n                35,\n                c,\n                [\n                    16,\n                    14\n                ],\n                44,\n                s,\n                [\n                    2,\n                    3\n                ],\n                28,\n                29,\n                2,\n                s,\n                [\n                    3,\n                    3\n                ],\n                28,\n                29,\n                3,\n                c,\n                [\n                    53,\n                    4\n                ],\n                s,\n                [\n                    45,\n                    5,\n                    1\n                ],\n                c,\n                [\n                    100,\n                    42\n                ],\n                52,\n                c,\n                [\n                    5,\n                    4\n                ],\n                53\n            ])\n        }),\n        defaultActions: bda({\n            idx: u([\n                6,\n                7,\n                8,\n                s,\n                [\n                    10,\n                    16,\n                    1\n                ],\n                33,\n                34,\n                39,\n                40,\n                41,\n                45,\n                47,\n                52,\n                53\n            ]),\n            goto: u([\n                9,\n                10,\n                11,\n                s,\n                [\n                    16,\n                    14,\n                    1\n                ],\n                12,\n                1,\n                30,\n                13,\n                s,\n                [\n                    4,\n                    4,\n                    1\n                ],\n                14,\n                15,\n                8\n            ])\n        }),\n        parseError: function parseError(str, hash, ExceptionClass) {\n            if (hash.recoverable) {\n                if (typeof this.trace === \"function\") {\n                    this.trace(str);\n                }\n                hash.destroy(); // destroy... well, *almost*!\n            } else {\n                if (typeof this.trace === \"function\") {\n                    this.trace(str);\n                }\n                if (!ExceptionClass) {\n                    ExceptionClass = this.JisonParserError;\n                }\n                throw new ExceptionClass(str, hash);\n            }\n        },\n        parse: function parse(input) {\n            var self = this;\n            var stack = new Array(128); // token stack: stores token which leads to state at the same index (column storage)\n            var sstack = new Array(128); // state stack: stores states (column storage)\n            var vstack = new Array(128); // semantic value stack\n            var table = this.table;\n            var sp = 0; // 'stack pointer': index into the stacks\n            var symbol = 0;\n            var TERROR = this.TERROR;\n            var EOF = this.EOF;\n            var ERROR_RECOVERY_TOKEN_DISCARD_COUNT = this.options.errorRecoveryTokenDiscardCount | 0 || 3;\n            var NO_ACTION = [\n                0,\n                54 /* === table.length :: ensures that anyone using this new state will fail dramatically! */ \n            ];\n            var lexer;\n            if (this.__lexer__) {\n                lexer = this.__lexer__;\n            } else {\n                lexer = this.__lexer__ = Object.create(this.lexer);\n            }\n            var sharedState_yy = {\n                parseError: undefined,\n                quoteName: undefined,\n                lexer: undefined,\n                parser: undefined,\n                pre_parse: undefined,\n                post_parse: undefined,\n                pre_lex: undefined,\n                post_lex: undefined // WARNING: must be written this way for the code expanders to work correctly in both ES5 and ES6 modes!\n            };\n            var ASSERT;\n            if (typeof assert !== \"function\") {\n                ASSERT = function JisonAssert(cond, msg) {\n                    if (!cond) {\n                        throw new Error(\"assertion failed: \" + (msg || \"***\"));\n                    }\n                };\n            } else {\n                ASSERT = assert;\n            }\n            this.yyGetSharedState = function yyGetSharedState() {\n                return sharedState_yy;\n            };\n            function shallow_copy_noclobber(dst, src) {\n                for(var k in src){\n                    if (typeof dst[k] === \"undefined\" && Object.prototype.hasOwnProperty.call(src, k)) {\n                        dst[k] = src[k];\n                    }\n                }\n            }\n            // copy state\n            shallow_copy_noclobber(sharedState_yy, this.yy);\n            sharedState_yy.lexer = lexer;\n            sharedState_yy.parser = this;\n            // Does the shared state override the default `parseError` that already comes with this instance?\n            if (typeof sharedState_yy.parseError === \"function\") {\n                this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {\n                    if (!ExceptionClass) {\n                        ExceptionClass = this.JisonParserError;\n                    }\n                    return sharedState_yy.parseError.call(this, str, hash, ExceptionClass);\n                };\n            } else {\n                this.parseError = this.originalParseError;\n            }\n            // Does the shared state override the default `quoteName` that already comes with this instance?\n            if (typeof sharedState_yy.quoteName === \"function\") {\n                this.quoteName = function quoteNameAlt(id_str) {\n                    return sharedState_yy.quoteName.call(this, id_str);\n                };\n            } else {\n                this.quoteName = this.originalQuoteName;\n            }\n            // set up the cleanup function; make it an API so that external code can re-use this one in case of\n            // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which\n            // case this parse() API method doesn't come with a `finally { ... }` block any more!\n            //\n            // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,\n            //       or else your `sharedState`, etc. references will be *wrong*!\n            this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {\n                var rv;\n                if (invoke_post_methods) {\n                    var hash;\n                    if (sharedState_yy.post_parse || this.post_parse) {\n                        // create an error hash info instance: we re-use this API in a **non-error situation**\n                        // as this one delivers all parser internals ready for access by userland code.\n                        hash = this.constructParseErrorInfo(null, null, null, false);\n                    }\n                    if (sharedState_yy.post_parse) {\n                        rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue, hash);\n                        if (typeof rv !== \"undefined\") resultValue = rv;\n                    }\n                    if (this.post_parse) {\n                        rv = this.post_parse.call(this, sharedState_yy, resultValue, hash);\n                        if (typeof rv !== \"undefined\") resultValue = rv;\n                    }\n                    // cleanup:\n                    if (hash && hash.destroy) {\n                        hash.destroy();\n                    }\n                }\n                if (this.__reentrant_call_depth > 1) return resultValue; // do not (yet) kill the sharedState when this is a reentrant run.\n                // clean up the lingering lexer structures as well:\n                if (lexer.cleanupAfterLex) {\n                    lexer.cleanupAfterLex(do_not_nuke_errorinfos);\n                }\n                // prevent lingering circular references from causing memory leaks:\n                if (sharedState_yy) {\n                    sharedState_yy.lexer = undefined;\n                    sharedState_yy.parser = undefined;\n                    if (lexer.yy === sharedState_yy) {\n                        lexer.yy = undefined;\n                    }\n                }\n                sharedState_yy = undefined;\n                this.parseError = this.originalParseError;\n                this.quoteName = this.originalQuoteName;\n                // nuke the vstack[] array at least as that one will still reference obsoleted user values.\n                // To be safe, we nuke the other internal stack columns as well...\n                stack.length = 0; // fastest way to nuke an array without overly bothering the GC\n                sstack.length = 0;\n                vstack.length = 0;\n                sp = 0;\n                // nuke the error hash info instances created during this run.\n                // Userland code must COPY any data/references\n                // in the error hash instance(s) it is more permanently interested in.\n                if (!do_not_nuke_errorinfos) {\n                    for(var i = this.__error_infos.length - 1; i >= 0; i--){\n                        var el = this.__error_infos[i];\n                        if (el && typeof el.destroy === \"function\") {\n                            el.destroy();\n                        }\n                    }\n                    this.__error_infos.length = 0;\n                }\n                return resultValue;\n            };\n            // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,\n            //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!\n            this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {\n                var pei = {\n                    errStr: msg,\n                    exception: ex,\n                    text: lexer.match,\n                    value: lexer.yytext,\n                    token: this.describeSymbol(symbol) || symbol,\n                    token_id: symbol,\n                    line: lexer.yylineno,\n                    expected: expected,\n                    recoverable: recoverable,\n                    state: state,\n                    action: action,\n                    new_state: newState,\n                    symbol_stack: stack,\n                    state_stack: sstack,\n                    value_stack: vstack,\n                    stack_pointer: sp,\n                    yy: sharedState_yy,\n                    lexer: lexer,\n                    parser: this,\n                    // and make sure the error info doesn't stay due to potential\n                    // ref cycle via userland code manipulations.\n                    // These would otherwise all be memory leak opportunities!\n                    //\n                    // Note that only array and object references are nuked as those\n                    // constitute the set of elements which can produce a cyclic ref.\n                    // The rest of the members is kept intact as they are harmless.\n                    destroy: function destructParseErrorInfo() {\n                        // remove cyclic references added to error info:\n                        // info.yy = null;\n                        // info.lexer = null;\n                        // info.value = null;\n                        // info.value_stack = null;\n                        // ...\n                        var rec = !!this.recoverable;\n                        for(var key in this){\n                            if (this.hasOwnProperty(key) && typeof key === \"object\") {\n                                this[key] = undefined;\n                            }\n                        }\n                        this.recoverable = rec;\n                    }\n                };\n                // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!\n                this.__error_infos.push(pei);\n                return pei;\n            };\n            function getNonTerminalFromCode(symbol) {\n                var tokenName = self.getSymbolName(symbol);\n                if (!tokenName) {\n                    tokenName = symbol;\n                }\n                return tokenName;\n            }\n            function stdLex() {\n                var token = lexer.lex();\n                // if token isn't its numeric value, convert\n                if (typeof token !== \"number\") {\n                    token = self.symbols_[token] || token;\n                }\n                return token || EOF;\n            }\n            function fastLex() {\n                var token = lexer.fastLex();\n                // if token isn't its numeric value, convert\n                if (typeof token !== \"number\") {\n                    token = self.symbols_[token] || token;\n                }\n                return token || EOF;\n            }\n            var lex = stdLex;\n            var state, action, r, t;\n            var yyval = {\n                $: true,\n                _$: undefined,\n                yy: sharedState_yy\n            };\n            var p;\n            var yyrulelen;\n            var this_production;\n            var newState;\n            var retval = false;\n            try {\n                this.__reentrant_call_depth++;\n                lexer.setInput(input, sharedState_yy);\n                // NOTE: we *assume* no lexer pre/post handlers are set up *after* \n                // this initial `setInput()` call: hence we can now check and decide\n                // whether we'll go with the standard, slower, lex() API or the\n                // `fast_lex()` one:\n                if (typeof lexer.canIUse === \"function\") {\n                    var lexerInfo = lexer.canIUse();\n                    if (lexerInfo.fastLex && typeof fastLex === \"function\") {\n                        lex = fastLex;\n                    }\n                }\n                vstack[sp] = null;\n                sstack[sp] = 0;\n                stack[sp] = 0;\n                ++sp;\n                if (this.pre_parse) {\n                    this.pre_parse.call(this, sharedState_yy);\n                }\n                if (sharedState_yy.pre_parse) {\n                    sharedState_yy.pre_parse.call(this, sharedState_yy);\n                }\n                newState = sstack[sp - 1];\n                for(;;){\n                    // retrieve state number from top of stack\n                    state = newState; // sstack[sp - 1];\n                    // use default actions if available\n                    if (this.defaultActions[state]) {\n                        action = 2;\n                        newState = this.defaultActions[state];\n                    } else {\n                        // The single `==` condition below covers both these `===` comparisons in a single\n                        // operation:\n                        //\n                        //     if (symbol === null || typeof symbol === 'undefined') ...\n                        if (!symbol) {\n                            symbol = lex();\n                        }\n                        // read action for current state and first input\n                        t = table[state] && table[state][symbol] || NO_ACTION;\n                        newState = t[1];\n                        action = t[0];\n                        // handle parse error\n                        if (!action) {\n                            var errStr;\n                            var errSymbolDescr = this.describeSymbol(symbol) || symbol;\n                            var expected = this.collect_expected_token_set(state);\n                            // Report error\n                            if (typeof lexer.yylineno === \"number\") {\n                                errStr = \"Parse error on line \" + (lexer.yylineno + 1) + \": \";\n                            } else {\n                                errStr = \"Parse error: \";\n                            }\n                            if (typeof lexer.showPosition === \"function\") {\n                                errStr += \"\\n\" + lexer.showPosition(79 - 10, 10) + \"\\n\";\n                            }\n                            if (expected.length) {\n                                errStr += \"Expecting \" + expected.join(\", \") + \", got unexpected \" + errSymbolDescr;\n                            } else {\n                                errStr += \"Unexpected \" + errSymbolDescr;\n                            }\n                            // we cannot recover from the error!\n                            p = this.constructParseErrorInfo(errStr, null, expected, false);\n                            r = this.parseError(p.errStr, p, this.JisonParserError);\n                            if (typeof r !== \"undefined\") {\n                                retval = r;\n                            }\n                            break;\n                        }\n                    }\n                    switch(action){\n                        // catch misc. parse failures:\n                        default:\n                            // this shouldn't happen, unless resolve defaults are off\n                            if (action instanceof Array) {\n                                p = this.constructParseErrorInfo(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol, null, null, false);\n                                r = this.parseError(p.errStr, p, this.JisonParserError);\n                                if (typeof r !== \"undefined\") {\n                                    retval = r;\n                                }\n                                break;\n                            }\n                            // Another case of better safe than sorry: in case state transitions come out of another error recovery process\n                            // or a buggy LUT (LookUp Table):\n                            p = this.constructParseErrorInfo(\"Parsing halted. No viable error recovery approach available due to internal system failure.\", null, null, false);\n                            r = this.parseError(p.errStr, p, this.JisonParserError);\n                            if (typeof r !== \"undefined\") {\n                                retval = r;\n                            }\n                            break;\n                        // shift:\n                        case 1:\n                            stack[sp] = symbol;\n                            vstack[sp] = lexer.yytext;\n                            sstack[sp] = newState; // push state\n                            ++sp;\n                            symbol = 0;\n                            continue;\n                        // reduce:\n                        case 2:\n                            this_production = this.productions_[newState - 1]; // `this.productions_[]` is zero-based indexed while states start from 1 upwards...\n                            yyrulelen = this_production[1];\n                            r = this.performAction.call(yyval, newState, sp - 1, vstack);\n                            if (typeof r !== \"undefined\") {\n                                retval = r;\n                                break;\n                            }\n                            // pop off stack\n                            sp -= yyrulelen;\n                            // don't overwrite the `symbol` variable: use a local var to speed things up:\n                            var ntsymbol = this_production[0]; // push nonterminal (reduce)\n                            stack[sp] = ntsymbol;\n                            vstack[sp] = yyval.$;\n                            // goto new state = table[STATE][NONTERMINAL]\n                            newState = table[sstack[sp - 1]][ntsymbol];\n                            sstack[sp] = newState;\n                            ++sp;\n                            continue;\n                        // accept:\n                        case 3:\n                            if (sp !== -2) {\n                                retval = true;\n                                // Return the `$accept` rule's `$$` result, if available.\n                                //\n                                // Also note that JISON always adds this top-most `$accept` rule (with implicit,\n                                // default, action):\n                                //\n                                //     $accept: <startSymbol> $end\n                                //                  %{ $$ = $1; @$ = @1; %}\n                                //\n                                // which, combined with the parse kernel's `$accept` state behaviour coded below,\n                                // will produce the `$$` value output of the <startSymbol> rule as the parse result,\n                                // IFF that result is *not* `undefined`. (See also the parser kernel code.)\n                                //\n                                // In code:\n                                //\n                                //                  %{\n                                //                      @$ = @1;            // if location tracking support is included\n                                //                      if (typeof $1 !== 'undefined')\n                                //                          return $1;\n                                //                      else\n                                //                          return true;           // the default parse result if the rule actions don't produce anything\n                                //                  %}\n                                sp--;\n                                if (typeof vstack[sp] !== \"undefined\") {\n                                    retval = vstack[sp];\n                                }\n                            }\n                            break;\n                    }\n                    break;\n                }\n            } catch (ex) {\n                // report exceptions through the parseError callback too, but keep the exception intact\n                // if it is a known parser or lexer error which has been thrown by parseError() already:\n                if (ex instanceof this.JisonParserError) {\n                    throw ex;\n                } else if (lexer && typeof lexer.JisonLexerError === \"function\" && ex instanceof lexer.JisonLexerError) {\n                    throw ex;\n                }\n                p = this.constructParseErrorInfo(\"Parsing aborted due to exception.\", ex, null, false);\n                retval = false;\n                r = this.parseError(p.errStr, p, this.JisonParserError);\n                if (typeof r !== \"undefined\") {\n                    retval = r;\n                }\n            } finally{\n                retval = this.cleanupAfterParse(retval, true, true);\n                this.__reentrant_call_depth--;\n            } // /finally\n            return retval;\n        }\n    };\n    parser.originalParseError = parser.parseError;\n    parser.originalQuoteName = parser.quoteName;\n    /* lexer generated by jison-lex 0.6.1-215 */ /*\n * Returns a Lexer object of the following structure:\n *\n *  Lexer: {\n *    yy: {}     The so-called \"shared state\" or rather the *source* of it;\n *               the real \"shared state\" `yy` passed around to\n *               the rule actions, etc. is a direct reference!\n *\n *               This \"shared context\" object was passed to the lexer by way of \n *               the `lexer.setInput(str, yy)` API before you may use it.\n *\n *               This \"shared context\" object is passed to the lexer action code in `performAction()`\n *               so userland code in the lexer actions may communicate with the outside world \n *               and/or other lexer rules' actions in more or less complex ways.\n *\n *  }\n *\n *  Lexer.prototype: {\n *    EOF: 1,\n *    ERROR: 2,\n *\n *    yy:        The overall \"shared context\" object reference.\n *\n *    JisonLexerError: function(msg, hash),\n *\n *    performAction: function lexer__performAction(yy, yyrulenumber, YY_START),\n *\n *               The function parameters and `this` have the following value/meaning:\n *               - `this`    : reference to the `lexer` instance. \n *                               `yy_` is an alias for `this` lexer instance reference used internally.\n *\n *               - `yy`      : a reference to the `yy` \"shared state\" object which was passed to the lexer\n *                             by way of the `lexer.setInput(str, yy)` API before.\n *\n *                             Note:\n *                             The extra arguments you specified in the `%parse-param` statement in your\n *                             **parser** grammar definition file are passed to the lexer via this object\n *                             reference as member variables.\n *\n *               - `yyrulenumber`   : index of the matched lexer rule (regex), used internally.\n *\n *               - `YY_START`: the current lexer \"start condition\" state.\n *\n *    parseError: function(str, hash, ExceptionClass),\n *\n *    constructLexErrorInfo: function(error_message, is_recoverable),\n *               Helper function.\n *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.\n *               See it's use in this lexer kernel in many places; example usage:\n *\n *                   var infoObj = lexer.constructParseErrorInfo('fail!', true);\n *                   var retVal = lexer.parseError(infoObj.errStr, infoObj, lexer.JisonLexerError);\n *\n *    options: { ... lexer %options ... },\n *\n *    lex: function(),\n *               Produce one token of lexed input, which was passed in earlier via the `lexer.setInput()` API.\n *               You MAY use the additional `args...` parameters as per `%parse-param` spec of the **lexer** grammar:\n *               these extra `args...` are added verbatim to the `yy` object reference as member variables.\n *\n *               WARNING:\n *               Lexer's additional `args...` parameters (via lexer's `%parse-param`) MAY conflict with\n *               any attributes already added to `yy` by the **parser** or the jison run-time; \n *               when such a collision is detected an exception is thrown to prevent the generated run-time \n *               from silently accepting this confusing and potentially hazardous situation! \n *\n *    cleanupAfterLex: function(do_not_nuke_errorinfos),\n *               Helper function.\n *\n *               This helper API is invoked when the **parse process** has completed: it is the responsibility\n *               of the **parser** (or the calling userland code) to invoke this method once cleanup is desired. \n *\n *               This helper may be invoked by user code to ensure the internal lexer gets properly garbage collected.\n *\n *    setInput: function(input, [yy]),\n *\n *\n *    input: function(),\n *\n *\n *    unput: function(str),\n *\n *\n *    more: function(),\n *\n *\n *    reject: function(),\n *\n *\n *    less: function(n),\n *\n *\n *    pastInput: function(n),\n *\n *\n *    upcomingInput: function(n),\n *\n *\n *    showPosition: function(),\n *\n *\n *    test_match: function(regex_match_array, rule_index),\n *\n *\n *    next: function(),\n *\n *\n *    begin: function(condition),\n *\n *\n *    pushState: function(condition),\n *\n *\n *    popState: function(),\n *\n *\n *    topState: function(),\n *\n *\n *    _currentRules: function(),\n *\n *\n *    stateStackSize: function(),\n *\n *\n *    performAction: function(yy, yy_, yyrulenumber, YY_START),\n *\n *\n *    rules: [...],\n *\n *\n *    conditions: {associative list: name ==> set},\n *  }\n *\n *\n *  token location info (`yylloc`): {\n *    first_line: n,\n *    last_line: n,\n *    first_column: n,\n *    last_column: n,\n *    range: [start_number, end_number]\n *               (where the numbers are indexes into the input string, zero-based)\n *  }\n *\n * ---\n *\n * The `parseError` function receives a 'hash' object with these members for lexer errors:\n *\n *  {\n *    text:        (matched text)\n *    token:       (the produced terminal token, if any)\n *    token_id:    (the produced terminal token numeric ID, if any)\n *    line:        (yylineno)\n *    loc:         (yylloc)\n *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule\n *                  available for this particular error)\n *    yy:          (object: the current parser internal \"shared state\" `yy`\n *                  as is also available in the rule actions; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    lexer:       (reference to the current lexer instance used by the parser)\n *  }\n *\n * while `this` will reference the current lexer instance.\n *\n * When `parseError` is invoked by the lexer, the default implementation will\n * attempt to invoke `yy.parser.parseError()`; when this callback is not provided\n * it will try to invoke `yy.parseError()` instead. When that callback is also not\n * provided, a `JisonLexerError` exception will be thrown containing the error\n * message and `hash`, as constructed by the `constructLexErrorInfo()` API.\n *\n * Note that the lexer's `JisonLexerError` error class is passed via the\n * `ExceptionClass` argument, which is invoked to construct the exception\n * instance to be thrown, so technically `parseError` will throw the object\n * produced by the `new ExceptionClass(str, hash)` JavaScript expression.\n *\n * ---\n *\n * You can specify lexer options by setting / modifying the `.options` object of your Lexer instance.\n * These options are available:\n *\n * (Options are permanent.)\n *  \n *  yy: {\n *      parseError: function(str, hash, ExceptionClass)\n *                 optional: overrides the default `parseError` function.\n *  }\n *\n *  lexer.options: {\n *      pre_lex:  function()\n *                 optional: is invoked before the lexer is invoked to produce another token.\n *                 `this` refers to the Lexer object.\n *      post_lex: function(token) { return token; }\n *                 optional: is invoked when the lexer has produced a token `token`;\n *                 this function can override the returned token value by returning another.\n *                 When it does not return any (truthy) value, the lexer will return\n *                 the original `token`.\n *                 `this` refers to the Lexer object.\n *\n * WARNING: the next set of options are not meant to be changed. They echo the abilities of\n * the lexer as per when it was compiled!\n *\n *      ranges: boolean\n *                 optional: `true` ==> token location info will include a .range[] member.\n *      flex: boolean\n *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested\n *                 exhaustively to find the longest match.\n *      backtrack_lexer: boolean\n *                 optional: `true` ==> lexer regexes are tested in order and for invoked;\n *                 the lexer terminates the scan when a token is returned by the action code.\n *      xregexp: boolean\n *                 optional: `true` ==> lexer rule regexes are \"extended regex format\" requiring the\n *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer\n *                 rule regexes have been written as standard JavaScript RegExp expressions.\n *  }\n */ var lexer = function() {\n        /**\n   * See also:\n   * http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508\n   * but we keep the prototype.constructor and prototype.name assignment lines too for compatibility\n   * with userland code which might access the derived class in a 'classic' way.\n   *\n   * @public\n   * @constructor\n   * @nocollapse\n   */ function JisonLexerError(msg, hash) {\n            Object.defineProperty(this, \"name\", {\n                enumerable: false,\n                writable: false,\n                value: \"JisonLexerError\"\n            });\n            if (msg == null) msg = \"???\";\n            Object.defineProperty(this, \"message\", {\n                enumerable: false,\n                writable: true,\n                value: msg\n            });\n            this.hash = hash;\n            var stacktrace;\n            if (hash && hash.exception instanceof Error) {\n                var ex2 = hash.exception;\n                this.message = ex2.message || msg;\n                stacktrace = ex2.stack;\n            }\n            if (!stacktrace) {\n                if (Error.hasOwnProperty(\"captureStackTrace\")) {\n                    // V8\n                    Error.captureStackTrace(this, this.constructor);\n                } else {\n                    stacktrace = new Error(msg).stack;\n                }\n            }\n            if (stacktrace) {\n                Object.defineProperty(this, \"stack\", {\n                    enumerable: false,\n                    writable: false,\n                    value: stacktrace\n                });\n            }\n        }\n        if (typeof Object.setPrototypeOf === \"function\") {\n            Object.setPrototypeOf(JisonLexerError.prototype, Error.prototype);\n        } else {\n            JisonLexerError.prototype = Object.create(Error.prototype);\n        }\n        JisonLexerError.prototype.constructor = JisonLexerError;\n        JisonLexerError.prototype.name = \"JisonLexerError\";\n        var lexer = {\n            // Code Generator Information Report\n            // ---------------------------------\n            //\n            // Options:\n            //\n            //   backtracking: .................... false\n            //   location.ranges: ................. false\n            //   location line+column tracking: ... true\n            //\n            //\n            // Forwarded Parser Analysis flags:\n            //\n            //   uses yyleng: ..................... false\n            //   uses yylineno: ................... false\n            //   uses yytext: ..................... false\n            //   uses yylloc: ..................... false\n            //   uses lexer values: ............... true / true\n            //   location tracking: ............... false\n            //   location assignment: ............. false\n            //\n            //\n            // Lexer Analysis flags:\n            //\n            //   uses yyleng: ..................... ???\n            //   uses yylineno: ................... ???\n            //   uses yytext: ..................... ???\n            //   uses yylloc: ..................... ???\n            //   uses ParseError API: ............. ???\n            //   uses yyerror: .................... ???\n            //   uses location tracking & editing:  ???\n            //   uses more() API: ................. ???\n            //   uses unput() API: ................ ???\n            //   uses reject() API: ............... ???\n            //   uses less() API: ................. ???\n            //   uses display APIs pastInput(), upcomingInput(), showPosition():\n            //        ............................. ???\n            //   uses describeYYLLOC() API: ....... ???\n            //\n            // --------- END OF REPORT -----------\n            EOF: 1,\n            ERROR: 2,\n            // JisonLexerError: JisonLexerError,        /// <-- injected by the code generator\n            // options: {},                             /// <-- injected by the code generator\n            // yy: ...,                                 /// <-- injected by setInput()\n            __currentRuleSet__: null,\n            __error_infos: [],\n            __decompressed: false,\n            done: false,\n            _backtrack: false,\n            _input: \"\",\n            _more: false,\n            _signaled_error_token: false,\n            conditionStack: [],\n            match: \"\",\n            matched: \"\",\n            matches: false,\n            yytext: \"\",\n            offset: 0,\n            yyleng: 0,\n            yylineno: 0,\n            yylloc: null,\n            /**\n     * INTERNAL USE: construct a suitable error info hash object instance for `parseError`.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ constructLexErrorInfo: function lexer_constructLexErrorInfo(msg, recoverable, show_input_position) {\n                msg = \"\" + msg;\n                // heuristic to determine if the error message already contains a (partial) source code dump\n                // as produced by either `showPosition()` or `prettyPrintRange()`:\n                if (show_input_position == undefined) {\n                    show_input_position = !(msg.indexOf(\"\\n\") > 0 && msg.indexOf(\"^\") > 0);\n                }\n                if (this.yylloc && show_input_position) {\n                    if (typeof this.prettyPrintRange === \"function\") {\n                        var pretty_src = this.prettyPrintRange(this.yylloc);\n                        if (!/\\n\\s*$/.test(msg)) {\n                            msg += \"\\n\";\n                        }\n                        msg += \"\\n  Erroneous area:\\n\" + this.prettyPrintRange(this.yylloc);\n                    } else if (typeof this.showPosition === \"function\") {\n                        var pos_str = this.showPosition();\n                        if (pos_str) {\n                            if (msg.length && msg[msg.length - 1] !== \"\\n\" && pos_str[0] !== \"\\n\") {\n                                msg += \"\\n\" + pos_str;\n                            } else {\n                                msg += pos_str;\n                            }\n                        }\n                    }\n                }\n                /** @constructor */ var pei = {\n                    errStr: msg,\n                    recoverable: !!recoverable,\n                    text: this.match,\n                    token: null,\n                    line: this.yylineno,\n                    loc: this.yylloc,\n                    yy: this.yy,\n                    lexer: this,\n                    /**\n         * and make sure the error info doesn't stay due to potential\n         * ref cycle via userland code manipulations.\n         * These would otherwise all be memory leak opportunities!\n         * \n         * Note that only array and object references are nuked as those\n         * constitute the set of elements which can produce a cyclic ref.\n         * The rest of the members is kept intact as they are harmless.\n         * \n         * @public\n         * @this {LexErrorInfo}\n         */ destroy: function destructLexErrorInfo() {\n                        // remove cyclic references added to error info:\n                        // info.yy = null;\n                        // info.lexer = null;\n                        // ...\n                        var rec = !!this.recoverable;\n                        for(var key in this){\n                            if (this.hasOwnProperty(key) && typeof key === \"object\") {\n                                this[key] = undefined;\n                            }\n                        }\n                        this.recoverable = rec;\n                    }\n                };\n                // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!\n                this.__error_infos.push(pei);\n                return pei;\n            },\n            /**\n     * handler which is invoked when a lexer error occurs.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ parseError: function lexer_parseError(str, hash, ExceptionClass) {\n                if (!ExceptionClass) {\n                    ExceptionClass = this.JisonLexerError;\n                }\n                if (this.yy) {\n                    if (this.yy.parser && typeof this.yy.parser.parseError === \"function\") {\n                        return this.yy.parser.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;\n                    } else if (typeof this.yy.parseError === \"function\") {\n                        return this.yy.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;\n                    }\n                }\n                throw new ExceptionClass(str, hash);\n            },\n            /**\n     * method which implements `yyerror(str, ...args)` functionality for use inside lexer actions.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ yyerror: function yyError(str /*, ...args */ ) {\n                var lineno_msg = \"\";\n                if (this.yylloc) {\n                    lineno_msg = \" on line \" + (this.yylineno + 1);\n                }\n                var p = this.constructLexErrorInfo(\"Lexical error\" + lineno_msg + \": \" + str, this.options.lexerErrorsAreRecoverable);\n                // Add any extra args to the hash under the name `extra_error_attributes`:\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length) {\n                    p.extra_error_attributes = args;\n                }\n                return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;\n            },\n            /**\n     * final cleanup function for when we have completed lexing the input;\n     * make it an API so that external code can use this one once userland\n     * code has decided it's time to destroy any lingering lexer error\n     * hash object instances and the like: this function helps to clean\n     * up these constructs, which *may* carry cyclic references which would\n     * otherwise prevent the instances from being properly and timely\n     * garbage-collected, i.e. this function helps prevent memory leaks!\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ cleanupAfterLex: function lexer_cleanupAfterLex(do_not_nuke_errorinfos) {\n                // prevent lingering circular references from causing memory leaks:\n                this.setInput(\"\", {});\n                // nuke the error hash info instances created during this run.\n                // Userland code must COPY any data/references\n                // in the error hash instance(s) it is more permanently interested in.\n                if (!do_not_nuke_errorinfos) {\n                    for(var i = this.__error_infos.length - 1; i >= 0; i--){\n                        var el = this.__error_infos[i];\n                        if (el && typeof el.destroy === \"function\") {\n                            el.destroy();\n                        }\n                    }\n                    this.__error_infos.length = 0;\n                }\n                return this;\n            },\n            /**\n     * clear the lexer token context; intended for internal use only\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ clear: function lexer_clear() {\n                this.yytext = \"\";\n                this.yyleng = 0;\n                this.match = \"\";\n                // - DO NOT reset `this.matched`\n                this.matches = false;\n                this._more = false;\n                this._backtrack = false;\n                var col = this.yylloc ? this.yylloc.last_column : 0;\n                this.yylloc = {\n                    first_line: this.yylineno + 1,\n                    first_column: col,\n                    last_line: this.yylineno + 1,\n                    last_column: col,\n                    range: [\n                        this.offset,\n                        this.offset\n                    ]\n                };\n            },\n            /**\n     * resets the lexer, sets new input\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ setInput: function lexer_setInput(input, yy) {\n                this.yy = yy || this.yy || {};\n                // also check if we've fully initialized the lexer instance,\n                // including expansion work to be done to go from a loaded\n                // lexer to a usable lexer:\n                if (!this.__decompressed) {\n                    // step 1: decompress the regex list:\n                    var rules = this.rules;\n                    for(var i = 0, len = rules.length; i < len; i++){\n                        var rule_re = rules[i];\n                        // compression: is the RE an xref to another RE slot in the rules[] table?\n                        if (typeof rule_re === \"number\") {\n                            rules[i] = rules[rule_re];\n                        }\n                    }\n                    // step 2: unfold the conditions[] set to make these ready for use:\n                    var conditions = this.conditions;\n                    for(var k in conditions){\n                        var spec = conditions[k];\n                        var rule_ids = spec.rules;\n                        var len = rule_ids.length;\n                        var rule_regexes = new Array(len + 1); // slot 0 is unused; we use a 1-based index approach here to keep the hottest code in `lexer_next()` fast and simple! \n                        var rule_new_ids = new Array(len + 1);\n                        for(var i = 0; i < len; i++){\n                            var idx = rule_ids[i];\n                            var rule_re = rules[idx];\n                            rule_regexes[i + 1] = rule_re;\n                            rule_new_ids[i + 1] = idx;\n                        }\n                        spec.rules = rule_new_ids;\n                        spec.__rule_regexes = rule_regexes;\n                        spec.__rule_count = len;\n                    }\n                    this.__decompressed = true;\n                }\n                this._input = input || \"\";\n                this.clear();\n                this._signaled_error_token = false;\n                this.done = false;\n                this.yylineno = 0;\n                this.matched = \"\";\n                this.conditionStack = [\n                    \"INITIAL\"\n                ];\n                this.__currentRuleSet__ = null;\n                this.yylloc = {\n                    first_line: 1,\n                    first_column: 0,\n                    last_line: 1,\n                    last_column: 0,\n                    range: [\n                        0,\n                        0\n                    ]\n                };\n                this.offset = 0;\n                return this;\n            },\n            /**\n     * edit the remaining input via user-specified callback.\n     * This can be used to forward-adjust the input-to-parse, \n     * e.g. inserting macro expansions and alike in the\n     * input which has yet to be lexed.\n     * The behaviour of this API contrasts the `unput()` et al\n     * APIs as those act on the *consumed* input, while this\n     * one allows one to manipulate the future, without impacting\n     * the current `yyloc` cursor location or any history. \n     * \n     * Use this API to help implement C-preprocessor-like\n     * `#include` statements, etc.\n     * \n     * The provided callback must be synchronous and is\n     * expected to return the edited input (string).\n     *\n     * The `cpsArg` argument value is passed to the callback\n     * as-is.\n     *\n     * `callback` interface: \n     * `function callback(input, cpsArg)`\n     * \n     * - `input` will carry the remaining-input-to-lex string\n     *   from the lexer.\n     * - `cpsArg` is `cpsArg` passed into this API.\n     * \n     * The `this` reference for the callback will be set to\n     * reference this lexer instance so that userland code\n     * in the callback can easily and quickly access any lexer\n     * API. \n     *\n     * When the callback returns a non-string-type falsey value,\n     * we assume the callback did not edit the input and we\n     * will using the input as-is.\n     *\n     * When the callback returns a non-string-type value, it\n     * is converted to a string for lexing via the `\"\" + retval`\n     * operation. (See also why: http://2ality.com/2012/03/converting-to-string.html \n     * -- that way any returned object's `toValue()` and `toString()`\n     * methods will be invoked in a proper/desirable order.)\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ editRemainingInput: function lexer_editRemainingInput(callback, cpsArg) {\n                var rv = callback.call(this, this._input, cpsArg);\n                if (typeof rv !== \"string\") {\n                    if (rv) {\n                        this._input = \"\" + rv;\n                    }\n                // else: keep `this._input` as is.  \n                } else {\n                    this._input = rv;\n                }\n                return this;\n            },\n            /**\n     * consumes and returns one char from the input\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ input: function lexer_input() {\n                if (!this._input) {\n                    //this.done = true;    -- don't set `done` as we want the lex()/next() API to be able to produce one custom EOF token match after this anyhow. (lexer can match special <<EOF>> tokens and perform user action code for a <<EOF>> match, but only does so *once*)\n                    return null;\n                }\n                var ch = this._input[0];\n                this.yytext += ch;\n                this.yyleng++;\n                this.offset++;\n                this.match += ch;\n                this.matched += ch;\n                // Count the linenumber up when we hit the LF (or a stand-alone CR).\n                // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo\n                // and we advance immediately past the LF as well, returning both together as if\n                // it was all a single 'character' only.\n                var slice_len = 1;\n                var lines = false;\n                if (ch === \"\\n\") {\n                    lines = true;\n                } else if (ch === \"\\r\") {\n                    lines = true;\n                    var ch2 = this._input[1];\n                    if (ch2 === \"\\n\") {\n                        slice_len++;\n                        ch += ch2;\n                        this.yytext += ch2;\n                        this.yyleng++;\n                        this.offset++;\n                        this.match += ch2;\n                        this.matched += ch2;\n                        this.yylloc.range[1]++;\n                    }\n                }\n                if (lines) {\n                    this.yylineno++;\n                    this.yylloc.last_line++;\n                    this.yylloc.last_column = 0;\n                } else {\n                    this.yylloc.last_column++;\n                }\n                this.yylloc.range[1]++;\n                this._input = this._input.slice(slice_len);\n                return ch;\n            },\n            /**\n     * unshifts one char (or an entire string) into the input\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ unput: function lexer_unput(ch) {\n                var len = ch.length;\n                var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n                this._input = ch + this._input;\n                this.yytext = this.yytext.substr(0, this.yytext.length - len);\n                this.yyleng = this.yytext.length;\n                this.offset -= len;\n                this.match = this.match.substr(0, this.match.length - len);\n                this.matched = this.matched.substr(0, this.matched.length - len);\n                if (lines.length > 1) {\n                    this.yylineno -= lines.length - 1;\n                    this.yylloc.last_line = this.yylineno + 1;\n                    // Get last entirely matched line into the `pre_lines[]` array's\n                    // last index slot; we don't mind when other previously \n                    // matched lines end up in the array too. \n                    var pre = this.match;\n                    var pre_lines = pre.split(/(?:\\r\\n?|\\n)/g);\n                    if (pre_lines.length === 1) {\n                        pre = this.matched;\n                        pre_lines = pre.split(/(?:\\r\\n?|\\n)/g);\n                    }\n                    this.yylloc.last_column = pre_lines[pre_lines.length - 1].length;\n                } else {\n                    this.yylloc.last_column -= len;\n                }\n                this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng;\n                this.done = false;\n                return this;\n            },\n            /**\n     * cache matched text and append it on next action\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ more: function lexer_more() {\n                this._more = true;\n                return this;\n            },\n            /**\n     * signal the lexer that this rule fails to match the input, so the\n     * next matching rule (regex) should be tested instead.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ reject: function lexer_reject() {\n                if (this.options.backtrack_lexer) {\n                    this._backtrack = true;\n                } else {\n                    // when the `parseError()` call returns, we MUST ensure that the error is registered.\n                    // We accomplish this by signaling an 'error' token to be produced for the current\n                    // `.lex()` run.\n                    var lineno_msg = \"\";\n                    if (this.yylloc) {\n                        lineno_msg = \" on line \" + (this.yylineno + 1);\n                    }\n                    var p = this.constructLexErrorInfo(\"Lexical error\" + lineno_msg + \": You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\", false);\n                    this._signaled_error_token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;\n                }\n                return this;\n            },\n            /**\n     * retain first n characters of the match\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ less: function lexer_less(n) {\n                return this.unput(this.match.slice(n));\n            },\n            /**\n     * return (part of the) already matched input, i.e. for error\n     * messages.\n     * \n     * Limit the returned string length to `maxSize` (default: 20).\n     * \n     * Limit the returned string to the `maxLines` number of lines of\n     * input (default: 1).\n     * \n     * Negative limit values equal *unlimited*.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ pastInput: function lexer_pastInput(maxSize, maxLines) {\n                var past = this.matched.substring(0, this.matched.length - this.match.length);\n                if (maxSize < 0) maxSize = past.length;\n                else if (!maxSize) maxSize = 20;\n                if (maxLines < 0) maxLines = past.length; // can't ever have more input lines than this! \n                else if (!maxLines) maxLines = 1;\n                // `substr` anticipation: treat \\r\\n as a single character and take a little\n                // more than necessary so that we can still properly check against maxSize\n                // after we've transformed and limited the newLines in here:\n                past = past.substr(-maxSize * 2 - 2);\n                // now that we have a significantly reduced string to process, transform the newlines\n                // and chop them, then limit them:\n                var a = past.replace(/\\r\\n|\\r/g, \"\\n\").split(\"\\n\");\n                a = a.slice(-maxLines);\n                past = a.join(\"\\n\");\n                // When, after limiting to maxLines, we still have too much to return,\n                // do add an ellipsis prefix...\n                if (past.length > maxSize) {\n                    past = \"...\" + past.substr(-maxSize);\n                }\n                return past;\n            },\n            /**\n     * return (part of the) upcoming input, i.e. for error messages.\n     * \n     * Limit the returned string length to `maxSize` (default: 20).\n     * \n     * Limit the returned string to the `maxLines` number of lines of input (default: 1).\n     * \n     * Negative limit values equal *unlimited*.\n     *\n     * > ### NOTE ###\n     * >\n     * > *\"upcoming input\"* is defined as the whole of the both\n     * > the *currently lexed* input, together with any remaining input\n     * > following that. *\"currently lexed\"* input is the input \n     * > already recognized by the lexer but not yet returned with\n     * > the lexer token. This happens when you are invoking this API\n     * > from inside any lexer rule action code block. \n     * >\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ upcomingInput: function lexer_upcomingInput(maxSize, maxLines) {\n                var next = this.match;\n                if (maxSize < 0) maxSize = next.length + this._input.length;\n                else if (!maxSize) maxSize = 20;\n                if (maxLines < 0) maxLines = maxSize; // can't ever have more input lines than this! \n                else if (!maxLines) maxLines = 1;\n                // `substring` anticipation: treat \\r\\n as a single character and take a little\n                // more than necessary so that we can still properly check against maxSize\n                // after we've transformed and limited the newLines in here:\n                if (next.length < maxSize * 2 + 2) {\n                    next += this._input.substring(0, maxSize * 2 + 2); // substring is faster on Chrome/V8 \n                }\n                // now that we have a significantly reduced string to process, transform the newlines\n                // and chop them, then limit them:\n                var a = next.replace(/\\r\\n|\\r/g, \"\\n\").split(\"\\n\");\n                a = a.slice(0, maxLines);\n                next = a.join(\"\\n\");\n                // When, after limiting to maxLines, we still have too much to return,\n                // do add an ellipsis postfix...\n                if (next.length > maxSize) {\n                    next = next.substring(0, maxSize) + \"...\";\n                }\n                return next;\n            },\n            /**\n     * return a string which displays the character position where the\n     * lexing error occurred, i.e. for error messages\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ showPosition: function lexer_showPosition(maxPrefix, maxPostfix) {\n                var pre = this.pastInput(maxPrefix).replace(/\\s/g, \" \");\n                var c = new Array(pre.length + 1).join(\"-\");\n                return pre + this.upcomingInput(maxPostfix).replace(/\\s/g, \" \") + \"\\n\" + c + \"^\";\n            },\n            /**\n     * return an YYLLOC info object derived off the given context (actual, preceding, following, current).\n     * Use this method when the given `actual` location is not guaranteed to exist (i.e. when\n     * it MAY be NULL) and you MUST have a valid location info object anyway:\n     * then we take the given context of the `preceding` and `following` locations, IFF those are available,\n     * and reconstruct the `actual` location info from those.\n     * If this fails, the heuristic is to take the `current` location, IFF available.\n     * If this fails as well, we assume the sought location is at/around the current lexer position\n     * and then produce that one as a response. DO NOTE that these heuristic/derived location info\n     * values MAY be inaccurate!\n     *\n     * NOTE: `deriveLocationInfo()` ALWAYS produces a location info object *copy* of `actual`, not just\n     * a *reference* hence all input location objects can be assumed to be 'constant' (function has no side-effects).\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ deriveLocationInfo: function lexer_deriveYYLLOC(actual, preceding, following, current) {\n                var loc = {\n                    first_line: 1,\n                    first_column: 0,\n                    last_line: 1,\n                    last_column: 0,\n                    range: [\n                        0,\n                        0\n                    ]\n                };\n                if (actual) {\n                    loc.first_line = actual.first_line | 0;\n                    loc.last_line = actual.last_line | 0;\n                    loc.first_column = actual.first_column | 0;\n                    loc.last_column = actual.last_column | 0;\n                    if (actual.range) {\n                        loc.range[0] = actual.range[0] | 0;\n                        loc.range[1] = actual.range[1] | 0;\n                    }\n                }\n                if (loc.first_line <= 0 || loc.last_line < loc.first_line) {\n                    // plan B: heuristic using preceding and following:\n                    if (loc.first_line <= 0 && preceding) {\n                        loc.first_line = preceding.last_line | 0;\n                        loc.first_column = preceding.last_column | 0;\n                        if (preceding.range) {\n                            loc.range[0] = actual.range[1] | 0;\n                        }\n                    }\n                    if ((loc.last_line <= 0 || loc.last_line < loc.first_line) && following) {\n                        loc.last_line = following.first_line | 0;\n                        loc.last_column = following.first_column | 0;\n                        if (following.range) {\n                            loc.range[1] = actual.range[0] | 0;\n                        }\n                    }\n                    // plan C?: see if the 'current' location is useful/sane too:\n                    if (loc.first_line <= 0 && current && (loc.last_line <= 0 || current.last_line <= loc.last_line)) {\n                        loc.first_line = current.first_line | 0;\n                        loc.first_column = current.first_column | 0;\n                        if (current.range) {\n                            loc.range[0] = current.range[0] | 0;\n                        }\n                    }\n                    if (loc.last_line <= 0 && current && (loc.first_line <= 0 || current.first_line >= loc.first_line)) {\n                        loc.last_line = current.last_line | 0;\n                        loc.last_column = current.last_column | 0;\n                        if (current.range) {\n                            loc.range[1] = current.range[1] | 0;\n                        }\n                    }\n                }\n                // sanitize: fix last_line BEFORE we fix first_line as we use the 'raw' value of the latter\n                // or plan D heuristics to produce a 'sensible' last_line value:\n                if (loc.last_line <= 0) {\n                    if (loc.first_line <= 0) {\n                        loc.first_line = this.yylloc.first_line;\n                        loc.last_line = this.yylloc.last_line;\n                        loc.first_column = this.yylloc.first_column;\n                        loc.last_column = this.yylloc.last_column;\n                        loc.range[0] = this.yylloc.range[0];\n                        loc.range[1] = this.yylloc.range[1];\n                    } else {\n                        loc.last_line = this.yylloc.last_line;\n                        loc.last_column = this.yylloc.last_column;\n                        loc.range[1] = this.yylloc.range[1];\n                    }\n                }\n                if (loc.first_line <= 0) {\n                    loc.first_line = loc.last_line;\n                    loc.first_column = 0; // loc.last_column; \n                    loc.range[1] = loc.range[0];\n                }\n                if (loc.first_column < 0) {\n                    loc.first_column = 0;\n                }\n                if (loc.last_column < 0) {\n                    loc.last_column = loc.first_column > 0 ? loc.first_column : 80;\n                }\n                return loc;\n            },\n            /**\n     * return a string which displays the lines & columns of input which are referenced \n     * by the given location info range, plus a few lines of context.\n     * \n     * This function pretty-prints the indicated section of the input, with line numbers \n     * and everything!\n     * \n     * This function is very useful to provide highly readable error reports, while\n     * the location range may be specified in various flexible ways:\n     * \n     * - `loc` is the location info object which references the area which should be\n     *   displayed and 'marked up': these lines & columns of text are marked up by `^`\n     *   characters below each character in the entire input range.\n     * \n     * - `context_loc` is the *optional* location info object which instructs this\n     *   pretty-printer how much *leading* context should be displayed alongside\n     *   the area referenced by `loc`. This can help provide context for the displayed\n     *   error, etc.\n     * \n     *   When this location info is not provided, a default context of 3 lines is\n     *   used.\n     * \n     * - `context_loc2` is another *optional* location info object, which serves\n     *   a similar purpose to `context_loc`: it specifies the amount of *trailing*\n     *   context lines to display in the pretty-print output.\n     * \n     *   When this location info is not provided, a default context of 1 line only is\n     *   used.\n     * \n     * Special Notes:\n     * \n     * - when the `loc`-indicated range is very large (about 5 lines or more), then\n     *   only the first and last few lines of this block are printed while a\n     *   `...continued...` message will be printed between them.\n     * \n     *   This serves the purpose of not printing a huge amount of text when the `loc`\n     *   range happens to be huge: this way a manageable & readable output results\n     *   for arbitrary large ranges.\n     * \n     * - this function can display lines of input which whave not yet been lexed.\n     *   `prettyPrintRange()` can access the entire input!\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ prettyPrintRange: function lexer_prettyPrintRange(loc, context_loc, context_loc2) {\n                loc = this.deriveLocationInfo(loc, context_loc, context_loc2);\n                const CONTEXT = 3;\n                const CONTEXT_TAIL = 1;\n                const MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT = 2;\n                var input = this.matched + this._input;\n                var lines = input.split(\"\\n\");\n                var l0 = Math.max(1, context_loc ? context_loc.first_line : loc.first_line - CONTEXT);\n                var l1 = Math.max(1, context_loc2 ? context_loc2.last_line : loc.last_line + CONTEXT_TAIL);\n                var lineno_display_width = 1 + Math.log10(l1 | 1) | 0;\n                var ws_prefix = new Array(lineno_display_width).join(\" \");\n                var nonempty_line_indexes = [];\n                var rv = lines.slice(l0 - 1, l1 + 1).map(function injectLineNumber(line, index) {\n                    var lno = index + l0;\n                    var lno_pfx = (ws_prefix + lno).substr(-lineno_display_width);\n                    var rv = lno_pfx + \": \" + line;\n                    var errpfx = new Array(lineno_display_width + 1).join(\"^\");\n                    var offset = 2 + 1;\n                    var len = 0;\n                    if (lno === loc.first_line) {\n                        offset += loc.first_column;\n                        len = Math.max(2, (lno === loc.last_line ? loc.last_column : line.length) - loc.first_column + 1);\n                    } else if (lno === loc.last_line) {\n                        len = Math.max(2, loc.last_column + 1);\n                    } else if (lno > loc.first_line && lno < loc.last_line) {\n                        len = Math.max(2, line.length + 1);\n                    }\n                    if (len) {\n                        var lead = new Array(offset).join(\".\");\n                        var mark = new Array(len).join(\"^\");\n                        rv += \"\\n\" + errpfx + lead + mark;\n                        if (line.trim().length > 0) {\n                            nonempty_line_indexes.push(index);\n                        }\n                    }\n                    rv = rv.replace(/\\t/g, \" \");\n                    return rv;\n                });\n                // now make sure we don't print an overly large amount of error area: limit it \n                // to the top and bottom line count:\n                if (nonempty_line_indexes.length > 2 * MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT) {\n                    var clip_start = nonempty_line_indexes[MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT - 1] + 1;\n                    var clip_end = nonempty_line_indexes[nonempty_line_indexes.length - MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT] - 1;\n                    var intermediate_line = new Array(lineno_display_width + 1).join(\" \") + \"  (...continued...)\";\n                    intermediate_line += \"\\n\" + new Array(lineno_display_width + 1).join(\"-\") + \"  (---------------)\";\n                    rv.splice(clip_start, clip_end - clip_start + 1, intermediate_line);\n                }\n                return rv.join(\"\\n\");\n            },\n            /**\n     * helper function, used to produce a human readable description as a string, given\n     * the input `yylloc` location object.\n     * \n     * Set `display_range_too` to TRUE to include the string character index position(s)\n     * in the description if the `yylloc.range` is available.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ describeYYLLOC: function lexer_describe_yylloc(yylloc, display_range_too) {\n                var l1 = yylloc.first_line;\n                var l2 = yylloc.last_line;\n                var c1 = yylloc.first_column;\n                var c2 = yylloc.last_column;\n                var dl = l2 - l1;\n                var dc = c2 - c1;\n                var rv;\n                if (dl === 0) {\n                    rv = \"line \" + l1 + \", \";\n                    if (dc <= 1) {\n                        rv += \"column \" + c1;\n                    } else {\n                        rv += \"columns \" + c1 + \" .. \" + c2;\n                    }\n                } else {\n                    rv = \"lines \" + l1 + \"(column \" + c1 + \") .. \" + l2 + \"(column \" + c2 + \")\";\n                }\n                if (yylloc.range && display_range_too) {\n                    var r1 = yylloc.range[0];\n                    var r2 = yylloc.range[1] - 1;\n                    if (r2 <= r1) {\n                        rv += \" {String Offset: \" + r1 + \"}\";\n                    } else {\n                        rv += \" {String Offset range: \" + r1 + \" .. \" + r2 + \"}\";\n                    }\n                }\n                return rv;\n            },\n            /**\n     * test the lexed token: return FALSE when not a match, otherwise return token.\n     * \n     * `match` is supposed to be an array coming out of a regex match, i.e. `match[0]`\n     * contains the actually matched text string.\n     * \n     * Also move the input cursor forward and update the match collectors:\n     * \n     * - `yytext`\n     * - `yyleng`\n     * - `match`\n     * - `matches`\n     * - `yylloc`\n     * - `offset`\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ test_match: function lexer_test_match(match, indexed_rule) {\n                var token, lines, backup, match_str, match_str_len;\n                if (this.options.backtrack_lexer) {\n                    // save context\n                    backup = {\n                        yylineno: this.yylineno,\n                        yylloc: {\n                            first_line: this.yylloc.first_line,\n                            last_line: this.yylloc.last_line,\n                            first_column: this.yylloc.first_column,\n                            last_column: this.yylloc.last_column,\n                            range: this.yylloc.range.slice(0)\n                        },\n                        yytext: this.yytext,\n                        match: this.match,\n                        matches: this.matches,\n                        matched: this.matched,\n                        yyleng: this.yyleng,\n                        offset: this.offset,\n                        _more: this._more,\n                        _input: this._input,\n                        //_signaled_error_token: this._signaled_error_token,\n                        yy: this.yy,\n                        conditionStack: this.conditionStack.slice(0),\n                        done: this.done\n                    };\n                }\n                match_str = match[0];\n                match_str_len = match_str.length;\n                // if (match_str.indexOf('\\n') !== -1 || match_str.indexOf('\\r') !== -1) {\n                lines = match_str.split(/(?:\\r\\n?|\\n)/g);\n                if (lines.length > 1) {\n                    this.yylineno += lines.length - 1;\n                    this.yylloc.last_line = this.yylineno + 1;\n                    this.yylloc.last_column = lines[lines.length - 1].length;\n                } else {\n                    this.yylloc.last_column += match_str_len;\n                }\n                // }\n                this.yytext += match_str;\n                this.match += match_str;\n                this.matched += match_str;\n                this.matches = match;\n                this.yyleng = this.yytext.length;\n                this.yylloc.range[1] += match_str_len;\n                // previous lex rules MAY have invoked the `more()` API rather than producing a token:\n                // those rules will already have moved this `offset` forward matching their match lengths,\n                // hence we must only add our own match length now:\n                this.offset += match_str_len;\n                this._more = false;\n                this._backtrack = false;\n                this._input = this._input.slice(match_str_len);\n                // calling this method:\n                //\n                //   function lexer__performAction(yy, yyrulenumber, YY_START) {...}\n                token = this.performAction.call(this, this.yy, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n                // otherwise, when the action codes are all simple return token statements:\n                //token = this.simpleCaseActionClusters[indexed_rule];\n                if (this.done && this._input) {\n                    this.done = false;\n                }\n                if (token) {\n                    return token;\n                } else if (this._backtrack) {\n                    // recover context\n                    for(var k in backup){\n                        this[k] = backup[k];\n                    }\n                    this.__currentRuleSet__ = null;\n                    return false; // rule action called reject() implying the next rule should be tested instead. \n                } else if (this._signaled_error_token) {\n                    // produce one 'error' token as `.parseError()` in `reject()`\n                    // did not guarantee a failure signal by throwing an exception!\n                    token = this._signaled_error_token;\n                    this._signaled_error_token = false;\n                    return token;\n                }\n                return false;\n            },\n            /**\n     * return next match in input\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ next: function lexer_next() {\n                if (this.done) {\n                    this.clear();\n                    return this.EOF;\n                }\n                if (!this._input) {\n                    this.done = true;\n                }\n                var token, match, tempMatch, index;\n                if (!this._more) {\n                    this.clear();\n                }\n                var spec = this.__currentRuleSet__;\n                if (!spec) {\n                    // Update the ruleset cache as we apparently encountered a state change or just started lexing.\n                    // The cache is set up for fast lookup -- we assume a lexer will switch states much less often than it will\n                    // invoke the `lex()` token-producing API and related APIs, hence caching the set for direct access helps\n                    // speed up those activities a tiny bit.\n                    spec = this.__currentRuleSet__ = this._currentRules();\n                    // Check whether a *sane* condition has been pushed before: this makes the lexer robust against\n                    // user-programmer bugs such as https://github.com/zaach/jison-lex/issues/19\n                    if (!spec || !spec.rules) {\n                        var lineno_msg = \"\";\n                        if (this.options.trackPosition) {\n                            lineno_msg = \" on line \" + (this.yylineno + 1);\n                        }\n                        var p = this.constructLexErrorInfo(\"Internal lexer engine error\" + lineno_msg + ': The lex grammar programmer pushed a non-existing condition name \"' + this.topState() + '\"; this is a fatal error and should be reported to the application programmer team!', false);\n                        // produce one 'error' token until this situation has been resolved, most probably by parse termination!\n                        return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;\n                    }\n                }\n                var rule_ids = spec.rules;\n                var regexes = spec.__rule_regexes;\n                var len = spec.__rule_count;\n                // Note: the arrays are 1-based, while `len` itself is a valid index,\n                // hence the non-standard less-or-equal check in the next loop condition!\n                for(var i = 1; i <= len; i++){\n                    tempMatch = this._input.match(regexes[i]);\n                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                        match = tempMatch;\n                        index = i;\n                        if (this.options.backtrack_lexer) {\n                            token = this.test_match(tempMatch, rule_ids[i]);\n                            if (token !== false) {\n                                return token;\n                            } else if (this._backtrack) {\n                                match = undefined;\n                                continue; // rule action called reject() implying a rule MISmatch. \n                            } else {\n                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                                return false;\n                            }\n                        } else if (!this.options.flex) {\n                            break;\n                        }\n                    }\n                }\n                if (match) {\n                    token = this.test_match(match, rule_ids[index]);\n                    if (token !== false) {\n                        return token;\n                    }\n                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                    return false;\n                }\n                if (!this._input) {\n                    this.done = true;\n                    this.clear();\n                    return this.EOF;\n                } else {\n                    var lineno_msg = \"\";\n                    if (this.options.trackPosition) {\n                        lineno_msg = \" on line \" + (this.yylineno + 1);\n                    }\n                    var p = this.constructLexErrorInfo(\"Lexical error\" + lineno_msg + \": Unrecognized text.\", this.options.lexerErrorsAreRecoverable);\n                    var pendingInput = this._input;\n                    var activeCondition = this.topState();\n                    var conditionStackDepth = this.conditionStack.length;\n                    token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;\n                    if (token === this.ERROR) {\n                        // we can try to recover from a lexer error that `parseError()` did not 'recover' for us\n                        // by moving forward at least one character at a time IFF the (user-specified?) `parseError()`\n                        // has not consumed/modified any pending input or changed state in the error handler:\n                        if (!this.matches && // and make sure the input has been modified/consumed ...\n                        pendingInput === this._input && // ...or the lexer state has been modified significantly enough\n                        // to merit a non-consuming error handling action right now.\n                        activeCondition === this.topState() && conditionStackDepth === this.conditionStack.length) {\n                            this.input();\n                        }\n                    }\n                    return token;\n                }\n            },\n            /**\n     * return next match that has a token\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ lex: function lexer_lex() {\n                var r;\n                // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:\n                if (typeof this.pre_lex === \"function\") {\n                    r = this.pre_lex.call(this, 0);\n                }\n                if (typeof this.options.pre_lex === \"function\") {\n                    // (also account for a userdef function which does not return any value: keep the token as is)\n                    r = this.options.pre_lex.call(this, r) || r;\n                }\n                if (this.yy && typeof this.yy.pre_lex === \"function\") {\n                    // (also account for a userdef function which does not return any value: keep the token as is)\n                    r = this.yy.pre_lex.call(this, r) || r;\n                }\n                while(!r){\n                    r = this.next();\n                }\n                if (this.yy && typeof this.yy.post_lex === \"function\") {\n                    // (also account for a userdef function which does not return any value: keep the token as is)\n                    r = this.yy.post_lex.call(this, r) || r;\n                }\n                if (typeof this.options.post_lex === \"function\") {\n                    // (also account for a userdef function which does not return any value: keep the token as is)\n                    r = this.options.post_lex.call(this, r) || r;\n                }\n                if (typeof this.post_lex === \"function\") {\n                    // (also account for a userdef function which does not return any value: keep the token as is)\n                    r = this.post_lex.call(this, r) || r;\n                }\n                return r;\n            },\n            /**\n     * return next match that has a token. Identical to the `lex()` API but does not invoke any of the \n     * `pre_lex()` nor any of the `post_lex()` callbacks.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ fastLex: function lexer_fastLex() {\n                var r;\n                while(!r){\n                    r = this.next();\n                }\n                return r;\n            },\n            /**\n     * return info about the lexer state that can help a parser or other lexer API user to use the\n     * most efficient means available. This API is provided to aid run-time performance for larger\n     * systems which employ this lexer.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ canIUse: function lexer_canIUse() {\n                var rv = {\n                    fastLex: !(typeof this.pre_lex === \"function\" || typeof this.options.pre_lex === \"function\" || this.yy && typeof this.yy.pre_lex === \"function\" || this.yy && typeof this.yy.post_lex === \"function\" || typeof this.options.post_lex === \"function\" || typeof this.post_lex === \"function\") && typeof this.fastLex === \"function\"\n                };\n                return rv;\n            },\n            /**\n     * backwards compatible alias for `pushState()`;\n     * the latter is symmetrical with `popState()` and we advise to use\n     * those APIs in any modern lexer code, rather than `begin()`.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ begin: function lexer_begin(condition) {\n                return this.pushState(condition);\n            },\n            /**\n     * activates a new lexer condition state (pushes the new lexer\n     * condition state onto the condition stack)\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ pushState: function lexer_pushState(condition) {\n                this.conditionStack.push(condition);\n                this.__currentRuleSet__ = null;\n                return this;\n            },\n            /**\n     * pop the previously active lexer condition state off the condition\n     * stack\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ popState: function lexer_popState() {\n                var n = this.conditionStack.length - 1;\n                if (n > 0) {\n                    this.__currentRuleSet__ = null;\n                    return this.conditionStack.pop();\n                } else {\n                    return this.conditionStack[0];\n                }\n            },\n            /**\n     * return the currently active lexer condition state; when an index\n     * argument is provided it produces the N-th previous condition state,\n     * if available\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ topState: function lexer_topState(n) {\n                n = this.conditionStack.length - 1 - Math.abs(n || 0);\n                if (n >= 0) {\n                    return this.conditionStack[n];\n                } else {\n                    return \"INITIAL\";\n                }\n            },\n            /**\n     * (internal) determine the lexer rule set which is active for the\n     * currently active lexer condition state\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ _currentRules: function lexer__currentRules() {\n                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]];\n                } else {\n                    return this.conditions[\"INITIAL\"];\n                }\n            },\n            /**\n     * return the number of states currently on the stack\n     * \n     * @public\n     * @this {RegExpLexer}\n     */ stateStackSize: function lexer_stateStackSize() {\n                return this.conditionStack.length;\n            },\n            options: {\n                trackPosition: true\n            },\n            JisonLexerError: JisonLexerError,\n            performAction: function lexer__performAction(yy, yyrulenumber, YY_START) {\n                var yy_ = this;\n                var YYSTATE = YY_START;\n                switch(yyrulenumber){\n                    case 1:\n                        break;\n                    default:\n                        return this.simpleCaseActionClusters[yyrulenumber];\n                }\n            },\n            simpleCaseActionClusters: {\n                /*! Conditions:: INITIAL */ /*! Rule::       (--[0-9a-z-A-Z-]*) */ 0: 13,\n                /*! Conditions:: INITIAL */ /*! Rule::       \\* */ 2: 5,\n                /*! Conditions:: INITIAL */ /*! Rule::       \\/ */ 3: 6,\n                /*! Conditions:: INITIAL */ /*! Rule::       \\+ */ 4: 3,\n                /*! Conditions:: INITIAL */ /*! Rule::       - */ 5: 4,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)px\\b */ 6: 15,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)cm\\b */ 7: 15,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)mm\\b */ 8: 15,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)in\\b */ 9: 15,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)pt\\b */ 10: 15,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)pc\\b */ 11: 15,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)deg\\b */ 12: 16,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)grad\\b */ 13: 16,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)rad\\b */ 14: 16,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)turn\\b */ 15: 16,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)s\\b */ 16: 17,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)ms\\b */ 17: 17,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)Hz\\b */ 18: 18,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)kHz\\b */ 19: 18,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)dpi\\b */ 20: 19,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)dpcm\\b */ 21: 19,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)dppx\\b */ 22: 19,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)em\\b */ 23: 20,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)ex\\b */ 24: 21,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)ch\\b */ 25: 22,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)rem\\b */ 26: 23,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)vw\\b */ 27: 25,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)vh\\b */ 28: 24,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)vmin\\b */ 29: 26,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)vmax\\b */ 30: 27,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)% */ 31: 28,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([0-9]+(\\.[0-9]*)?|\\.[0-9]+)\\b */ 32: 11,\n                /*! Conditions:: INITIAL */ /*! Rule::       (calc) */ 33: 9,\n                /*! Conditions:: INITIAL */ /*! Rule::       (var) */ 34: 12,\n                /*! Conditions:: INITIAL */ /*! Rule::       ([a-z]+) */ 35: 10,\n                /*! Conditions:: INITIAL */ /*! Rule::       \\( */ 36: 7,\n                /*! Conditions:: INITIAL */ /*! Rule::       \\) */ 37: 8,\n                /*! Conditions:: INITIAL */ /*! Rule::       , */ 38: 14,\n                /*! Conditions:: INITIAL */ /*! Rule::       $ */ 39: 1\n            },\n            rules: [\n                /*  0: */ /^(?:(--[\\d\\-A-Za-z]*))/,\n                /*  1: */ /^(?:\\s+)/,\n                /*  2: */ /^(?:\\*)/,\n                /*  3: */ /^(?:\\/)/,\n                /*  4: */ /^(?:\\+)/,\n                /*  5: */ /^(?:-)/,\n                /*  6: */ /^(?:(\\d+(\\.\\d*)?|\\.\\d+)px\\b)/,\n                /*  7: */ /^(?:(\\d+(\\.\\d*)?|\\.\\d+)cm\\b)/,\n                /*  8: */ /^(?:(\\d+(\\.\\d*)?|\\.\\d+)mm\\b)/,\n                /*  9: */ /^(?:(\\d+(\\.\\d*)?|\\.\\d+)in\\b)/,\n                /* 10: */ /^(?:(\\d+(\\.\\d*)?|\\.\\d+)pt\\b)/,\n                /* 11: */ /^(?:(\\d+(\\.\\d*)?|\\.\\d+)pc\\b)/,\n                /* 12: */ /^(?:(\\d+(\\.\\d*)?|\\.\\d+)deg\\b)/,\n                /* 13: */ /^(?:(\\d+(\\.\\d*)?|\\.\\d+)grad\\b)/,\n                /* 14: */ /^(?:(\\d+(\\.\\d*)?|\\.\\d+)rad\\b)/,\n                /* 15: */ /^(?:(\\d+(\\.\\d*)?|\\.\\d+)turn\\b)/,\n                /* 16: */ /^(?:(\\d+(\\.\\d*)?|\\.\\d+)s\\b)/,\n                /* 17: */ /^(?:(\\d+(\\.\\d*)?|\\.\\d+)ms\\b)/,\n                /* 18: */ /^(?:(\\d+(\\.\\d*)?|\\.\\d+)Hz\\b)/,\n                /* 19: */ /^(?:(\\d+(\\.\\d*)?|\\.\\d+)kHz\\b)/,\n                /* 20: */ /^(?:(\\d+(\\.\\d*)?|\\.\\d+)dpi\\b)/,\n                /* 21: */ /^(?:(\\d+(\\.\\d*)?|\\.\\d+)dpcm\\b)/,\n                /* 22: */ /^(?:(\\d+(\\.\\d*)?|\\.\\d+)dppx\\b)/,\n                /* 23: */ /^(?:(\\d+(\\.\\d*)?|\\.\\d+)em\\b)/,\n                /* 24: */ /^(?:(\\d+(\\.\\d*)?|\\.\\d+)ex\\b)/,\n                /* 25: */ /^(?:(\\d+(\\.\\d*)?|\\.\\d+)ch\\b)/,\n                /* 26: */ /^(?:(\\d+(\\.\\d*)?|\\.\\d+)rem\\b)/,\n                /* 27: */ /^(?:(\\d+(\\.\\d*)?|\\.\\d+)vw\\b)/,\n                /* 28: */ /^(?:(\\d+(\\.\\d*)?|\\.\\d+)vh\\b)/,\n                /* 29: */ /^(?:(\\d+(\\.\\d*)?|\\.\\d+)vmin\\b)/,\n                /* 30: */ /^(?:(\\d+(\\.\\d*)?|\\.\\d+)vmax\\b)/,\n                /* 31: */ /^(?:(\\d+(\\.\\d*)?|\\.\\d+)%)/,\n                /* 32: */ /^(?:(\\d+(\\.\\d*)?|\\.\\d+)\\b)/,\n                /* 33: */ /^(?:(calc))/,\n                /* 34: */ /^(?:(var))/,\n                /* 35: */ /^(?:([a-z]+))/,\n                /* 36: */ /^(?:\\()/,\n                /* 37: */ /^(?:\\))/,\n                /* 38: */ /^(?:,)/,\n                /* 39: */ /^(?:$)/\n            ],\n            conditions: {\n                \"INITIAL\": {\n                    rules: [\n                        0,\n                        1,\n                        2,\n                        3,\n                        4,\n                        5,\n                        6,\n                        7,\n                        8,\n                        9,\n                        10,\n                        11,\n                        12,\n                        13,\n                        14,\n                        15,\n                        16,\n                        17,\n                        18,\n                        19,\n                        20,\n                        21,\n                        22,\n                        23,\n                        24,\n                        25,\n                        26,\n                        27,\n                        28,\n                        29,\n                        30,\n                        31,\n                        32,\n                        33,\n                        34,\n                        35,\n                        36,\n                        37,\n                        38,\n                        39\n                    ],\n                    inclusive: true\n                }\n            }\n        };\n        return lexer;\n    }();\n    parser.lexer = lexer;\n    function Parser() {\n        this.yy = {};\n    }\n    Parser.prototype = parser;\n    parser.Parser = Parser;\n    return new Parser();\n}();\nif (true) {\n    exports.parser = parser;\n    exports.Parser = parser.Parser;\n    exports.parse = function() {\n        return parser.parse.apply(parser, arguments);\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/reduce-css-calc@2.1.8/node_modules/reduce-css-calc/dist/parser.js\n");

/***/ })

};
;