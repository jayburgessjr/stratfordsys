name: 🚀 Stratford AI CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # =============================================================================
  # Quality Checks Job
  # =============================================================================
  quality-checks:
    name: 🔍 Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📥 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📁 Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: 🔧 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Lint Check
        run: pnpm lint

      - name: 🏷️ Type Check
        run: pnpm type-check

      - name: 💅 Format Check
        run: pnpm format:check

  # =============================================================================
  # Unit Tests Job
  # =============================================================================
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📥 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📁 Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: 🔧 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Run Unit Tests
        run: pnpm test
        env:
          # Test environment variables
          NODE_ENV: test
          LOG_LEVEL: error
          STRATFORD_RANDOM_SEED: 42
          ENABLE_MOCK_DATA: true

      - name: 📊 Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results
          path: |
            coverage/
            test-results/

  # =============================================================================
  # Build Job
  # =============================================================================
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [quality-checks, unit-tests]
    timeout-minutes: 10

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📥 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📁 Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: 🔧 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build Application
        run: pnpm build
        env:
          NODE_ENV: production
          STRATFORD_RANDOM_SEED: 42
          STRATFORD_VERSION: 1.0.0

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: |
            .next/
            public/
          retention-days: 7

  # =============================================================================
  # End-to-End Tests Job
  # =============================================================================
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 20

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📥 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📁 Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: 🔧 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files

      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps chromium

      - name: 🎭 Run E2E Tests
        run: pnpm test:e2e
        env:
          NODE_ENV: test
          STRATFORD_RANDOM_SEED: 42

      - name: 📤 Upload E2E Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/

  # =============================================================================
  # Security Scan Job
  # =============================================================================
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📥 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🔧 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔒 Run Security Audit
        run: pnpm audit --audit-level high

      - name: 🔍 Dependency Check
        run: npx audit-ci --config .audit-ci.json || true

      - name: 🛡️ Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔐 Check for Hardcoded Secrets
        run: |
          echo "Checking for hardcoded secrets..."
          grep -r --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" \
            -E "(password|secret|key|token)\s*[:=]\s*['\"][^'\"]{8,}" src/ && exit 1 || echo "✅ No hardcoded secrets found"

      - name: 🔒 Validate Encryption Implementation
        run: |
          echo "Validating encryption for sensitive data..."
          node -e "
            const fs = require('fs');
            const path = require('path');

            const sensitivePatterns = ['ssn', 'creditCard', 'bankAccount'];
            const files = fs.readdirSync('src/', { recursive: true })
              .filter(f => f.endsWith('.ts') || f.endsWith('.tsx'));

            let violations = [];
            for (const file of files) {
              const content = fs.readFileSync(path.join('src/', file), 'utf8');
              for (const pattern of sensitivePatterns) {
                if (content.includes(pattern) && !content.includes('encrypt')) {
                  violations.push(\`\${file}: Potential unencrypted \${pattern}\`);
                }
              }
            }

            if (violations.length > 0) {
              console.log('❌ Encryption violations found:');
              violations.forEach(v => console.log(v));
              process.exit(1);
            } else {
              console.log('✅ All sensitive data properly encrypted');
            }
          "

  # =============================================================================
  # Compliance Checks Job
  # =============================================================================
  compliance-checks:
    name: 🏛️ Compliance Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📥 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🔧 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏛️ GDPR Compliance Check
        run: |
          echo "Checking GDPR compliance patterns..."
          grep -r --include="*.ts" "exportUserData\|deleteUserData\|gdpr" src/ && echo "✅ GDPR patterns found" || echo "⚠️ No GDPR patterns found"

      - name: 📊 Financial Regulation Compliance
        run: |
          echo "Checking financial compliance patterns..."
          grep -r --include="*.ts" "AML\|KYC\|SAR\|FINRA\|SEC" src/ && echo "✅ Financial compliance patterns found" || echo "⚠️ No financial compliance patterns found"

      - name: 📋 Audit Trail Verification
        run: |
          echo "Verifying audit trail implementation..."
          grep -r --include="*.ts" "userActivity\|auditTrail" src/ && echo "✅ Audit trail found" || echo "⚠️ No audit trail found"

      - name: 🔒 Data Retention Policy Check
        run: |
          echo "Checking data retention policies..."
          grep -r --include="*.ts" "DataRetention\|retentionPolicy" src/ && echo "✅ Data retention policies found" || echo "⚠️ No data retention policies found"

  # =============================================================================
  # Deploy to Staging Job (develop branch)
  # =============================================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-checks, unit-tests, build, e2e-tests, security-scan, compliance-checks]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    timeout-minutes: 10
    environment:
      name: staging
      url: https://stratford-ai-staging.vercel.app

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # =============================================================================
  # Deploy to Production Job (main branch)
  # =============================================================================
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-checks, unit-tests, build, e2e-tests, security-scan, compliance-checks]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 10
    environment:
      name: production
      url: https://stratford-ai.vercel.app

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 🌟 Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: 📊 Performance Budget Check
        run: |
          echo "🔍 Checking performance metrics..."
          # Add Lighthouse CI or other performance checks here

      - name: 🎉 Deployment Success
        run: |
          echo "🎉 Stratford AI successfully deployed to production!"
          echo "🌐 URL: https://stratford-ai.vercel.app"